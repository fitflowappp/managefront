{"version":3,"sources":["../../../src/components/draft-js-utils/callModifierForSelectedBlocks.js"],"names":["Object","defineProperty","exports","value","_draftJs","require","_getSelectedBlocks","_getSelectedBlocks2","_interopRequireDefault","obj","__esModule","default","editorState","modifier","_len","arguments","length","args","Array","_key","contentState","getCurrentContent","currentSelection","getSelection","startKey","getStartKey","endKey","getEndKey","startOffset","getStartOffset","endOffset","getEndOffset","isSameBlock","selectedBlocks","finalEditorState","forEach","block","currentBlockKey","getKey","selectionStart","selectionEnd","getText","selection","SelectionState","anchorKey","anchorOffset","focusKey","focusOffset","apply","undefined","concat","EditorState","forceSelection"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;;AAIA,IAAIC,WAAWC,QAAQ,UAAR,CAAf;;AAEA,IAAIC,qBAAqBD,QAAQ,qBAAR,CAAzB;;AAEA,IAAIE,sBAAsBC,uBAAuBF,kBAAvB,CAA1B;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;AAkBAP,QAAQS,OAAR,GAAkB,UAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AACjD,OAAK,IAAIC,OAAOC,UAAUC,MAArB,EAA6BC,OAAOC,MAAMJ,OAAO,CAAP,GAAWA,OAAO,CAAlB,GAAsB,CAA5B,CAApC,EAAoEK,OAAO,CAAhF,EAAmFA,OAAOL,IAA1F,EAAgGK,MAAhG,EAAwG;AACtGF,SAAKE,OAAO,CAAZ,IAAiBJ,UAAUI,IAAV,CAAjB;AACD;;AAED,MAAIC,eAAeR,YAAYS,iBAAZ,EAAnB;AACA,MAAIC,mBAAmBV,YAAYW,YAAZ,EAAvB;;AAEA,MAAIC,WAAWF,iBAAiBG,WAAjB,EAAf;AACA,MAAIC,SAASJ,iBAAiBK,SAAjB,EAAb;AACA,MAAIC,cAAcN,iBAAiBO,cAAjB,EAAlB;AACA,MAAIC,YAAYR,iBAAiBS,YAAjB,EAAhB;;AAEA,MAAIC,cAAcR,aAAaE,MAA/B;AACA,MAAIO,iBAAiB,CAAC,GAAG1B,oBAAoBI,OAAxB,EAAiCS,YAAjC,EAA+CI,QAA/C,EAAyDE,MAAzD,CAArB;;AAEA,MAAIQ,mBAAmBtB,WAAvB;AACAqB,iBAAeE,OAAf,CAAuB,UAAUC,KAAV,EAAiB;AACtC,QAAIC,kBAAkBD,MAAME,MAAN,EAAtB;AACA,QAAIC,iBAAiBX,WAArB;AACA,QAAIY,eAAeV,SAAnB;;AAEA,QAAIO,oBAAoBb,QAAxB,EAAkC;AAChCe,uBAAiBX,WAAjB;AACAY,qBAAeR,cAAcF,SAAd,GAA0BM,MAAMK,OAAN,GAAgBzB,MAAzD;AACD,KAHD,MAGO,IAAIqB,oBAAoBX,MAAxB,EAAgC;AACrCa,uBAAiBP,cAAcJ,WAAd,GAA4B,CAA7C;AACAY,qBAAeV,SAAf;AACD,KAHM,MAGA;AACLS,uBAAiB,CAAjB;AACAC,qBAAeJ,MAAMK,OAAN,GAAgBzB,MAA/B;AACD;;AAED,QAAI0B,YAAY,IAAItC,SAASuC,cAAb,CAA4B;AAC1CC,iBAAWP,eAD+B;AAE1CQ,oBAAcN,cAF4B;AAG1CO,gBAAUT,eAHgC;AAI1CU,mBAAaP;AAJ6B,KAA5B,CAAhB;;AAOAN,uBAAmBrB,SAASmC,KAAT,CAAeC,SAAf,EAA0B,CAACf,gBAAD,EAAmBQ,SAAnB,EAA8BQ,MAA9B,CAAqCjC,IAArC,CAA1B,CAAnB;AACD,GAxBD;;AA0BA,SAAOb,SAAS+C,WAAT,CAAqBC,cAArB,CAAoClB,gBAApC,EAAsDZ,gBAAtD,CAAP;AACD,CA5CD","file":"callModifierForSelectedBlocks.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _draftJs = require('../draft');\n\nvar _getSelectedBlocks = require('./getSelectedBlocks');\n\nvar _getSelectedBlocks2 = _interopRequireDefault(_getSelectedBlocks);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calls a provided `modifier` function with a selection for each\n * selected block in the current editor selection. Passes through additional\n * arguments to the modifier.\n *\n * Note: At the moment it will retain the original selection and override\n * possible selection changes from modifiers\n *\n * @param  {object} editorState The current draft.js editor state object\n *\n * @param  {function} modifier  A modifier function to be executed.\n *                              Must have the signature (editorState, selection, ...)\n *\n * @param  {mixed} ...args      Additional arguments to be passed through to the modifier\n *\n * @return {object} The new editor state\n */\n\nexports.default = function (editorState, modifier) {\n  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var contentState = editorState.getCurrentContent();\n  var currentSelection = editorState.getSelection();\n\n  var startKey = currentSelection.getStartKey();\n  var endKey = currentSelection.getEndKey();\n  var startOffset = currentSelection.getStartOffset();\n  var endOffset = currentSelection.getEndOffset();\n\n  var isSameBlock = startKey === endKey;\n  var selectedBlocks = (0, _getSelectedBlocks2.default)(contentState, startKey, endKey);\n\n  var finalEditorState = editorState;\n  selectedBlocks.forEach(function (block) {\n    var currentBlockKey = block.getKey();\n    var selectionStart = startOffset;\n    var selectionEnd = endOffset;\n\n    if (currentBlockKey === startKey) {\n      selectionStart = startOffset;\n      selectionEnd = isSameBlock ? endOffset : block.getText().length;\n    } else if (currentBlockKey === endKey) {\n      selectionStart = isSameBlock ? startOffset : 0;\n      selectionEnd = endOffset;\n    } else {\n      selectionStart = 0;\n      selectionEnd = block.getText().length;\n    }\n\n    var selection = new _draftJs.SelectionState({\n      anchorKey: currentBlockKey,\n      anchorOffset: selectionStart,\n      focusKey: currentBlockKey,\n      focusOffset: selectionEnd\n    });\n\n    finalEditorState = modifier.apply(undefined, [finalEditorState, selection].concat(args));\n  });\n\n  return _draftJs.EditorState.forceSelection(finalEditorState, currentSelection);\n};"]}