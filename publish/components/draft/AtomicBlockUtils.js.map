{"version":3,"sources":["../../../src/components/draft/AtomicBlockUtils.js"],"names":["BlockMapBuilder","require","CharacterMetadata","ContentBlock","DraftModifier","EditorState","Immutable","generateRandomKey","List","Repeat","AtomicBlockUtils","insertAtomicBlock","editorState","entityKey","character","contentState","getCurrentContent","selectionState","getSelection","afterRemoval","removeRange","targetSelection","getSelectionAfter","afterSplit","splitBlock","insertionTarget","asAtomicBlock","setBlockType","charData","create","entity","fragmentArray","key","type","text","characterList","length","fragment","createFromArray","withAtomicBlock","replaceWithFragment","newContent","merge","selectionBefore","selectionAfter","set","push","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;AAEA,IAAIA,kBAAkBC,QAAQ,mBAAR,CAAtB;AACA,IAAIC,oBAAoBD,QAAQ,qBAAR,CAAxB;AACA,IAAIE,eAAeF,QAAQ,gBAAR,CAAnB;AACA,IAAIG,gBAAgBH,QAAQ,iBAAR,CAApB;AACA,IAAII,cAAcJ,QAAQ,eAAR,CAAlB;AACA,IAAIK,YAAYL,QAAQ,WAAR,CAAhB;;AAEA,IAAIM,oBAAoBN,QAAQ,qBAAR,CAAxB;;AAEA,IAAIO,OAAOF,UAAUE,IAArB;AACA,IAAIC,SAASH,UAAUG,MAAvB;;AAEA,IAAIC,mBAAmB;AACrBC,qBAAmB,SAASA,iBAAT,CAA2BC,WAA3B,EAAwCC,SAAxC,EAAmDC,SAAnD,EAA8D;AAC/E,QAAIC,eAAeH,YAAYI,iBAAZ,EAAnB;AACA,QAAIC,iBAAiBL,YAAYM,YAAZ,EAArB;;AAEA,QAAIC,eAAef,cAAcgB,WAAd,CAA0BL,YAA1B,EAAwCE,cAAxC,EAAwD,UAAxD,CAAnB;;AAEA,QAAII,kBAAkBF,aAAaG,iBAAb,EAAtB;AACA,QAAIC,aAAanB,cAAcoB,UAAd,CAAyBL,YAAzB,EAAuCE,eAAvC,CAAjB;AACA,QAAII,kBAAkBF,WAAWD,iBAAX,EAAtB;;AAEA,QAAII,gBAAgBtB,cAAcuB,YAAd,CAA2BJ,UAA3B,EAAuCE,eAAvC,EAAwD,QAAxD,CAApB;;AAEA,QAAIG,WAAW1B,kBAAkB2B,MAAlB,CAAyB,EAAEC,QAAQjB,SAAV,EAAzB,CAAf;;AAEA,QAAIkB,gBAAgB,CAAC,IAAI5B,YAAJ,CAAiB;AACpC6B,WAAKzB,mBAD+B;AAEpC0B,YAAM,QAF8B;AAGpCC,YAAMpB,SAH8B;AAIpCqB,qBAAe3B,KAAKC,OAAOmB,QAAP,EAAiBd,UAAUsB,MAA3B,CAAL;AAJqB,KAAjB,CAAD,EAKhB,IAAIjC,YAAJ,CAAiB;AACnB6B,WAAKzB,mBADc;AAEnB0B,YAAM,UAFa;AAGnBC,YAAM,EAHa;AAInBC,qBAAe3B;AAJI,KAAjB,CALgB,CAApB;;AAYA,QAAI6B,WAAWrC,gBAAgBsC,eAAhB,CAAgCP,aAAhC,CAAf;;AAEA,QAAIQ,kBAAkBnC,cAAcoC,mBAAd,CAAkCd,aAAlC,EAAiDD,eAAjD,EAAkEY,QAAlE,CAAtB;;AAEA,QAAII,aAAaF,gBAAgBG,KAAhB,CAAsB;AACrCC,uBAAiB1B,cADoB;AAErC2B,sBAAgBL,gBAAgBjB,iBAAhB,GAAoCuB,GAApC,CAAwC,UAAxC,EAAoD,IAApD;AAFqB,KAAtB,CAAjB;;AAKA,WAAOxC,YAAYyC,IAAZ,CAAiBlC,WAAjB,EAA8B6B,UAA9B,EAA0C,iBAA1C,CAAP;AACD;AArCoB,CAAvB;;AAwCAM,OAAOC,OAAP,GAAiBtC,gBAAjB","file":"AtomicBlockUtils.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AtomicBlockUtils\n * @typechecks\n * \n */\n\n'use strict';\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Immutable = require('immutable');\n\nvar generateRandomKey = require('./generateRandomKey');\n\nvar List = Immutable.List;\nvar Repeat = Immutable.Repeat;\n\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n\n    var charData = CharacterMetadata.create({ entity: entityKey });\n\n    var fragmentArray = [new ContentBlock({\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    }), new ContentBlock({\n      key: generateRandomKey(),\n      type: 'unstyled',\n      text: '',\n      characterList: List()\n    })];\n\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  }\n};\n\nmodule.exports = AtomicBlockUtils;"]}