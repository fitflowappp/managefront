{"version":3,"sources":["../../../src/components/draft/applyEntityToContentState.js"],"names":["Immutable","require","applyEntityToContentBlock","applyEntityToContentState","contentState","selectionState","entityKey","blockMap","getBlockMap","startKey","getStartKey","startOffset","getStartOffset","endKey","getEndKey","endOffset","getEndOffset","newBlocks","skipUntil","_","k","takeUntil","toOrderedMap","merge","OrderedMap","get","map","block","blockKey","sliceStart","sliceEnd","getLength","selectionBefore","selectionAfter","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;AAEA,IAAIA,YAAYC,QAAQ,WAAR,CAAhB;;AAEA,IAAIC,4BAA4BD,QAAQ,6BAAR,CAAhC;;AAEA,SAASE,yBAAT,CAAmCC,YAAnC,EAAiDC,cAAjD,EAAiEC,SAAjE,EAA4E;AAC1E,MAAIC,WAAWH,aAAaI,WAAb,EAAf;AACA,MAAIC,WAAWJ,eAAeK,WAAf,EAAf;AACA,MAAIC,cAAcN,eAAeO,cAAf,EAAlB;AACA,MAAIC,SAASR,eAAeS,SAAf,EAAb;AACA,MAAIC,YAAYV,eAAeW,YAAf,EAAhB;;AAEA,MAAIC,YAAYV,SAASW,SAAT,CAAmB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACjD,WAAOA,MAAMX,QAAb;AACD,GAFe,EAEbY,SAFa,CAEH,UAAUF,CAAV,EAAaC,CAAb,EAAgB;AAC3B,WAAOA,MAAMP,MAAb;AACD,GAJe,EAIbS,YAJa,GAIEC,KAJF,CAIQvB,UAAUwB,UAAV,CAAqB,CAAC,CAACX,MAAD,EAASN,SAASkB,GAAT,CAAaZ,MAAb,CAAT,CAAD,CAArB,CAJR,EAIgEa,GAJhE,CAIoE,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC7G,QAAIC,aAAaD,aAAanB,QAAb,GAAwBE,WAAxB,GAAsC,CAAvD;AACA,QAAImB,WAAWF,aAAaf,MAAb,GAAsBE,SAAtB,GAAkCY,MAAMI,SAAN,EAAjD;AACA,WAAO7B,0BAA0ByB,KAA1B,EAAiCE,UAAjC,EAA6CC,QAA7C,EAAuDxB,SAAvD,CAAP;AACD,GARe,CAAhB;;AAUA,SAAOF,aAAamB,KAAb,CAAmB;AACxBhB,cAAUA,SAASgB,KAAT,CAAeN,SAAf,CADc;AAExBe,qBAAiB3B,cAFO;AAGxB4B,oBAAgB5B;AAHQ,GAAnB,CAAP;AAKD;;AAED6B,OAAOC,OAAP,GAAiBhC,yBAAjB","file":"applyEntityToContentState.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule applyEntityToContentState\n * @typechecks\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar applyEntityToContentBlock = require('./applyEntityToContentBlock');\n\nfunction applyEntityToContentState(contentState, selectionState, entityKey) {\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n\n  var newBlocks = blockMap.skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).toOrderedMap().merge(Immutable.OrderedMap([[endKey, blockMap.get(endKey)]])).map(function (block, blockKey) {\n    var sliceStart = blockKey === startKey ? startOffset : 0;\n    var sliceEnd = blockKey === endKey ? endOffset : block.getLength();\n    return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);\n  });\n\n  return contentState.merge({\n    blockMap: blockMap.merge(newBlocks),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n}\n\nmodule.exports = applyEntityToContentState;"]}