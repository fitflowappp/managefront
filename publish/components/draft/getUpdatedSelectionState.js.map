{"version":3,"sources":["../../../src/components/draft/getUpdatedSelectionState.js"],"names":["DraftOffsetKey","require","nullthrows","getUpdatedSelectionState","editorState","anchorKey","anchorOffset","focusKey","focusOffset","selection","getSelection","process","env","NODE_ENV","console","warn","arguments","toJS","anchorPath","decode","anchorBlockKey","blockKey","anchorLeaf","getBlockTree","getIn","decoratorKey","leafKey","focusPath","focusBlockKey","focusLeaf","anchorLeafStart","get","focusLeafStart","anchorBlockOffset","focusBlockOffset","areEqual","getAnchorKey","getAnchorOffset","getFocusKey","getFocusOffset","isBackward","anchorLeafEnd","focusLeafEnd","startKey","getCurrentContent","getBlockMap","keySeq","skipUntil","v","first","merge","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,iBAAiBC,QAAQ,kBAAR,CAArB;;AAEA,IAAIC,aAAaD,QAAQ,qBAAR,CAAjB;;AAEA,SAASE,wBAAT,CAAkCC,WAAlC,EAA+CC,SAA/C,EAA0DC,YAA1D,EAAwEC,QAAxE,EAAkFC,WAAlF,EAA+F;AAC7F,MAAIC,YAAYP,WAAWE,YAAYM,YAAZ,EAAX,CAAhB;AACA,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,CAACR,SAAD,IAAc,CAACE,QAAnB,EAA6B;AAC3B;AACAO,cAAQC,IAAR,CAAa,0BAAb,EAAyCC,SAAzC,EAAoDZ,YAAYa,IAAZ,EAApD;AACA;AACA,aAAOR,SAAP;AACD;AACF;;AAED,MAAIS,aAAalB,eAAemB,MAAf,CAAsBd,SAAtB,CAAjB;AACA,MAAIe,iBAAiBF,WAAWG,QAAhC;AACA,MAAIC,aAAalB,YAAYmB,YAAZ,CAAyBH,cAAzB,EAAyCI,KAAzC,CAA+C,CAACN,WAAWO,YAAZ,EAA0B,QAA1B,EAAoCP,WAAWQ,OAA/C,CAA/C,CAAjB;;AAEA,MAAIC,YAAY3B,eAAemB,MAAf,CAAsBZ,QAAtB,CAAhB;AACA,MAAIqB,gBAAgBD,UAAUN,QAA9B;AACA,MAAIQ,YAAYzB,YAAYmB,YAAZ,CAAyBK,aAAzB,EAAwCJ,KAAxC,CAA8C,CAACG,UAAUF,YAAX,EAAyB,QAAzB,EAAmCE,UAAUD,OAA7C,CAA9C,CAAhB;;AAEA,MAAII,kBAAkBR,WAAWS,GAAX,CAAe,OAAf,CAAtB;AACA,MAAIC,iBAAiBH,UAAUE,GAAV,CAAc,OAAd,CAArB;;AAEA,MAAIE,oBAAoBX,aAAaQ,kBAAkBxB,YAA/B,GAA8C,IAAtE;AACA,MAAI4B,mBAAmBL,YAAYG,iBAAiBxB,WAA7B,GAA2C,IAAlE;;AAEA,MAAI2B,WAAW1B,UAAU2B,YAAV,OAA6BhB,cAA7B,IAA+CX,UAAU4B,eAAV,OAAgCJ,iBAA/E,IAAoGxB,UAAU6B,WAAV,OAA4BV,aAAhI,IAAiJnB,UAAU8B,cAAV,OAA+BL,gBAA/L;;AAEA,MAAIC,QAAJ,EAAc;AACZ,WAAO1B,SAAP;AACD;;AAED,MAAI+B,aAAa,KAAjB;AACA,MAAIpB,mBAAmBQ,aAAvB,EAAsC;AACpC,QAAIa,gBAAgBnB,WAAWS,GAAX,CAAe,KAAf,CAApB;AACA,QAAIW,eAAeb,UAAUE,GAAV,CAAc,KAAd,CAAnB;AACA,QAAIC,mBAAmBF,eAAnB,IAAsCY,iBAAiBD,aAA3D,EAA0E;AACxED,mBAAahC,cAAcF,YAA3B;AACD,KAFD,MAEO;AACLkC,mBAAaR,iBAAiBF,eAA9B;AACD;AACF,GARD,MAQO;AACL,QAAIa,WAAWvC,YAAYwC,iBAAZ,GAAgCC,WAAhC,GAA8CC,MAA9C,GAAuDC,SAAvD,CAAiE,UAAUC,CAAV,EAAa;AAC3F,aAAOA,MAAM5B,cAAN,IAAwB4B,MAAMpB,aAArC;AACD,KAFc,EAEZqB,KAFY,EAAf;AAGAT,iBAAaG,aAAaf,aAA1B;AACD;;AAED,SAAOnB,UAAUyC,KAAV,CAAgB;AACrB7C,eAAWe,cADU;AAErBd,kBAAc2B,iBAFO;AAGrB1B,cAAUqB,aAHW;AAIrBpB,iBAAa0B,gBAJQ;AAKrBM,gBAAYA;AALS,GAAhB,CAAP;AAOD;;AAEDW,OAAOC,OAAP,GAAiBjD,wBAAjB","file":"getUpdatedSelectionState.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getUpdatedSelectionState\n * \n */\n\n'use strict';\n\nvar DraftOffsetKey = require('./DraftOffsetKey');\n\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nfunction getUpdatedSelectionState(editorState, anchorKey, anchorOffset, focusKey, focusOffset) {\n  var selection = nullthrows(editorState.getSelection());\n  if (process.env.NODE_ENV !== 'production') {\n    if (!anchorKey || !focusKey) {\n      /*eslint-disable no-console */\n      console.warn('Invalid selection state.', arguments, editorState.toJS());\n      /*eslint-enable no-console */\n      return selection;\n    }\n  }\n\n  var anchorPath = DraftOffsetKey.decode(anchorKey);\n  var anchorBlockKey = anchorPath.blockKey;\n  var anchorLeaf = editorState.getBlockTree(anchorBlockKey).getIn([anchorPath.decoratorKey, 'leaves', anchorPath.leafKey]);\n\n  var focusPath = DraftOffsetKey.decode(focusKey);\n  var focusBlockKey = focusPath.blockKey;\n  var focusLeaf = editorState.getBlockTree(focusBlockKey).getIn([focusPath.decoratorKey, 'leaves', focusPath.leafKey]);\n\n  var anchorLeafStart = anchorLeaf.get('start');\n  var focusLeafStart = focusLeaf.get('start');\n\n  var anchorBlockOffset = anchorLeaf ? anchorLeafStart + anchorOffset : null;\n  var focusBlockOffset = focusLeaf ? focusLeafStart + focusOffset : null;\n\n  var areEqual = selection.getAnchorKey() === anchorBlockKey && selection.getAnchorOffset() === anchorBlockOffset && selection.getFocusKey() === focusBlockKey && selection.getFocusOffset() === focusBlockOffset;\n\n  if (areEqual) {\n    return selection;\n  }\n\n  var isBackward = false;\n  if (anchorBlockKey === focusBlockKey) {\n    var anchorLeafEnd = anchorLeaf.get('end');\n    var focusLeafEnd = focusLeaf.get('end');\n    if (focusLeafStart === anchorLeafStart && focusLeafEnd === anchorLeafEnd) {\n      isBackward = focusOffset < anchorOffset;\n    } else {\n      isBackward = focusLeafStart < anchorLeafStart;\n    }\n  } else {\n    var startKey = editorState.getCurrentContent().getBlockMap().keySeq().skipUntil(function (v) {\n      return v === anchorBlockKey || v === focusBlockKey;\n    }).first();\n    isBackward = startKey === focusBlockKey;\n  }\n\n  return selection.merge({\n    anchorKey: anchorBlockKey,\n    anchorOffset: anchorBlockOffset,\n    focusKey: focusBlockKey,\n    focusOffset: focusBlockOffset,\n    isBackward: isBackward\n  });\n}\n\nmodule.exports = getUpdatedSelectionState;"]}