{"version":3,"sources":["../../../src/components/draft/keyCommandBackspaceWord.js"],"names":["DraftRemovableWord","require","EditorState","moveSelectionBackward","removeTextWithStrategy","keyCommandBackspaceWord","editorState","afterRemoval","strategyState","selection","getSelection","offset","getStartOffset","key","getStartKey","content","getCurrentContent","text","getBlockForKey","getText","slice","toRemove","getBackward","length","push","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,qBAAqBC,QAAQ,sBAAR,CAAzB;AACA,IAAIC,cAAcD,QAAQ,eAAR,CAAlB;;AAEA,IAAIE,wBAAwBF,QAAQ,yBAAR,CAA5B;AACA,IAAIG,yBAAyBH,QAAQ,0BAAR,CAA7B;;AAEA;;;;AAIA,SAASI,uBAAT,CAAiCC,WAAjC,EAA8C;AAC5C,MAAIC,eAAeH,uBAAuBE,WAAvB,EAAoC,UAAUE,aAAV,EAAyB;AAC9E,QAAIC,YAAYD,cAAcE,YAAd,EAAhB;AACA,QAAIC,SAASF,UAAUG,cAAV,EAAb;AACA;AACA,QAAID,WAAW,CAAf,EAAkB;AAChB,aAAOR,sBAAsBK,aAAtB,EAAqC,CAArC,CAAP;AACD;AACD,QAAIK,MAAMJ,UAAUK,WAAV,EAAV;AACA,QAAIC,UAAUP,cAAcQ,iBAAd,EAAd;AACA,QAAIC,OAAOF,QAAQG,cAAR,CAAuBL,GAAvB,EAA4BM,OAA5B,GAAsCC,KAAtC,CAA4C,CAA5C,EAA+CT,MAA/C,CAAX;AACA,QAAIU,WAAWrB,mBAAmBsB,WAAnB,CAA+BL,IAA/B,CAAf;AACA,WAAOd,sBAAsBK,aAAtB,EAAqCa,SAASE,MAAT,IAAmB,CAAxD,CAAP;AACD,GAZkB,EAYhB,UAZgB,CAAnB;;AAcA,MAAIhB,iBAAiBD,YAAYU,iBAAZ,EAArB,EAAsD;AACpD,WAAOV,WAAP;AACD;;AAED,SAAOJ,YAAYsB,IAAZ,CAAiBlB,WAAjB,EAA8BC,YAA9B,EAA4C,cAA5C,CAAP;AACD;;AAEDkB,OAAOC,OAAP,GAAiBrB,uBAAjB","file":"keyCommandBackspaceWord.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandBackspaceWord\n * \n */\n\n'use strict';\n\nvar DraftRemovableWord = require('./DraftRemovableWord');\nvar EditorState = require('./EditorState');\n\nvar moveSelectionBackward = require('./moveSelectionBackward');\nvar removeTextWithStrategy = require('./removeTextWithStrategy');\n\n/**\n * Delete the word that is left of the cursor, as well as any spaces or\n * punctuation after the word.\n */\nfunction keyCommandBackspaceWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    // If there are no words before the cursor, remove the preceding newline.\n    if (offset === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(0, offset);\n    var toRemove = DraftRemovableWord.getBackward(text);\n    return moveSelectionBackward(strategyState, toRemove.length || 1);\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceWord;"]}