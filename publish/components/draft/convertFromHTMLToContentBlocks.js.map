{"version":3,"sources":["../../../src/components/draft/convertFromHTMLToContentBlocks.js"],"names":["CharacterMetadata","require","ContentBlock","DefaultDraftBlockRenderMap","DraftEntity","Immutable","URI","generateRandomKey","getSafeBodyFromHTML","invariant","nullthrows","sanitizeDraftText","List","OrderedSet","NBSP","SPACE","MAX_DEPTH","REGEX_CR","RegExp","REGEX_LF","REGEX_NBSP","inlineTags","b","code","del","em","i","s","strike","strong","u","lastBlock","getEmptyChunk","text","inlines","entities","blocks","getWhitespaceChunk","inEntity","Array","getSoftNewlineChunk","getBlockDividerChunk","block","depth","type","Math","max","min","getListBlockType","tag","lastList","getBlockMapSupportedTags","blockRenderMap","unstyledElement","get","element","map","config","valueSeq","toSet","filter","toArray","sort","getMultiMatchedType","multiMatchExtractor","ii","length","matchType","getBlockTypeForTag","matchedTypes","wrapper","keySeq","processInlineTag","node","currentStyle","styleToCheck","add","toOrderedSet","HTMLElement","htmlElement","withMutations","style","fontWeight","fontStyle","textDecoration","joinChunks","A","B","lastInB","slice","pop","shift","concat","containsSemanticBlockMarkup","html","blockTags","some","indexOf","hasValidLinkText","link","HTMLAnchorElement","process","env","NODE_ENV","undefined","protocol","genFragment","inlineStyle","inBlock","nodeName","toLowerCase","newBlock","nextBlockType","lastLastBlock","textContent","trim","replace","fill","chunk","newChunk","child","firstChild","entityId","href","toString","create","url","sibling","nextSibling","getChunkForHTML","DOMBuilder","supportedBlockTags","safeBody","workingBlocks","push","split","unshift","convertFromHTMLtoContentBlocks","arguments","start","textBlock","end","characterList","data","entity","key","module","exports"],"mappings":"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","file":"convertFromHTMLToContentBlocks.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromHTMLToContentBlocks\n * @typechecks\n * \n */\n\n'use strict';\n\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar DefaultDraftBlockRenderMap = require('./DefaultDraftBlockRenderMap');\nvar DraftEntity = require('./DraftEntity');\nvar Immutable = require('immutable');\nvar URI = require('fbjs/lib/URI');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\nvar invariant = require('fbjs/lib/invariant');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar sanitizeDraftText = require('./sanitizeDraftText');\n\nvar List = Immutable.List;\nvar OrderedSet = Immutable.OrderedSet;\n\nvar NBSP = '&nbsp;';\nvar SPACE = ' ';\n\n// Arbitrary max indent\nvar MAX_DEPTH = 4;\n\n// used for replacing characters in HTML\nvar REGEX_CR = new RegExp('\\r', 'g');\nvar REGEX_LF = new RegExp('\\n', 'g');\nvar REGEX_NBSP = new RegExp(NBSP, 'g');\n\n// Block tag flow is different because LIs do not have\n// a deterministic style ;_;\nvar inlineTags = {\n  b: 'BOLD',\n  code: 'CODE',\n  del: 'STRIKETHROUGH',\n  em: 'ITALIC',\n  i: 'ITALIC',\n  s: 'STRIKETHROUGH',\n  strike: 'STRIKETHROUGH',\n  strong: 'BOLD',\n  u: 'UNDERLINE'\n};\n\nvar lastBlock;\n\nfunction getEmptyChunk() {\n  return {\n    text: '',\n    inlines: [],\n    entities: [],\n    blocks: []\n  };\n}\n\nfunction getWhitespaceChunk(inEntity) {\n  var entities = new Array(1);\n  if (inEntity) {\n    entities[0] = inEntity;\n  }\n  return {\n    text: SPACE,\n    inlines: [OrderedSet()],\n    entities: entities,\n    blocks: []\n  };\n}\n\nfunction getSoftNewlineChunk() {\n  return {\n    text: '\\n',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: []\n  };\n}\n\nfunction getBlockDividerChunk(block, depth) {\n  return {\n    text: '\\r',\n    inlines: [OrderedSet()],\n    entities: new Array(1),\n    blocks: [{\n      type: block,\n      depth: Math.max(0, Math.min(MAX_DEPTH, depth))\n    }]\n  };\n}\n\nfunction getListBlockType(tag, lastList) {\n  if (tag === 'li') {\n    return lastList === 'ol' ? 'ordered-list-item' : 'unordered-list-item';\n  }\n  return null;\n}\n\nfunction getBlockMapSupportedTags(blockRenderMap) {\n  var unstyledElement = blockRenderMap.get('unstyled').element;\n  return blockRenderMap.map(function (config) {\n    return config.element;\n  }).valueSeq().toSet().filter(function (tag) {\n    return tag !== unstyledElement;\n  }).toArray().sort();\n}\n\n// custom element conversions\nfunction getMultiMatchedType(tag, lastList, multiMatchExtractor) {\n  for (var ii = 0; ii < multiMatchExtractor.length; ii++) {\n    var matchType = multiMatchExtractor[ii](tag, lastList);\n    if (matchType) {\n      return matchType;\n    }\n  }\n  return null;\n}\n\nfunction getBlockTypeForTag(tag, lastList, blockRenderMap) {\n  var matchedTypes = blockRenderMap.filter(function (config) {\n    return config.element === tag || config.wrapper === tag;\n  }).keySeq().toSet().toArray().sort();\n\n  // if we dont have any matched type, return unstyled\n  // if we have one matched type return it\n  // if we have multi matched types use the multi-match function to gather type\n  switch (matchedTypes.length) {\n    case 0:\n      return 'unstyled';\n    case 1:\n      return matchedTypes[0];\n    default:\n      return getMultiMatchedType(tag, lastList, [getListBlockType]) || 'unstyled';\n  }\n}\n\nfunction processInlineTag(tag, node, currentStyle) {\n  var styleToCheck = inlineTags[tag];\n  if (styleToCheck) {\n    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();\n  } else if (node instanceof HTMLElement) {\n    (function () {\n      var htmlElement = node;\n      currentStyle = currentStyle.withMutations(function (style) {\n        if (htmlElement.style.fontWeight === 'bold') {\n          style.add('BOLD');\n        }\n\n        if (htmlElement.style.fontStyle === 'italic') {\n          style.add('ITALIC');\n        }\n\n        if (htmlElement.style.textDecoration === 'underline') {\n          style.add('UNDERLINE');\n        }\n\n        if (htmlElement.style.textDecoration === 'line-through') {\n          style.add('STRIKETHROUGH');\n        }\n      }).toOrderedSet();\n    })();\n  }\n  return currentStyle;\n}\n\nfunction joinChunks(A, B) {\n  // Sometimes two blocks will touch in the DOM and we need to strip the\n  // extra delimiter to preserve niceness.\n  var lastInB = B.text.slice(0, 1);\n\n  if (A.text.slice(-1) === '\\r' && lastInB === '\\r') {\n    A.text = A.text.slice(0, -1);\n    A.inlines.pop();\n    A.entities.pop();\n    A.blocks.pop();\n  }\n\n  // Kill whitespace after blocks\n  if (A.text.slice(-1) === '\\r') {\n    if (B.text === SPACE || B.text === '\\n') {\n      return A;\n    } else if (lastInB === SPACE || lastInB === '\\n') {\n      B.text = B.text.slice(1);\n      B.inlines.shift();\n      B.entities.shift();\n    }\n  }\n\n  return {\n    text: A.text + B.text,\n    inlines: A.inlines.concat(B.inlines),\n    entities: A.entities.concat(B.entities),\n    blocks: A.blocks.concat(B.blocks)\n  };\n}\n\n/**\n * Check to see if we have anything like <p> <blockquote> <h1>... to create\n * block tags from. If we do, we can use those and ignore <div> tags. If we\n * don't, we can treat <div> tags as meaningful (unstyled) blocks.\n */\nfunction containsSemanticBlockMarkup(html, blockTags) {\n  return blockTags.some(function (tag) {\n    return html.indexOf('<' + tag) !== -1;\n  });\n}\n\nfunction hasValidLinkText(link) {\n  !(link instanceof HTMLAnchorElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Link must be an HTMLAnchorElement.') : invariant(false) : undefined;\n  var protocol = link.protocol;\n  return protocol === 'http:' || protocol === 'https:';\n}\n\nfunction genFragment(node, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, inEntity) {\n  var nodeName = node.nodeName.toLowerCase();\n  var newBlock = false;\n  var nextBlockType = 'unstyled';\n  var lastLastBlock = lastBlock;\n\n  // Base Case\n  if (nodeName === '#text') {\n    var text = node.textContent;\n    if (text.trim() === '' && inBlock !== 'pre') {\n      return getWhitespaceChunk(inEntity);\n    }\n    if (inBlock !== 'pre') {\n      // Can't use empty string because MSWord\n      text = text.replace(REGEX_LF, SPACE);\n    }\n\n    // save the last block so we can use it later\n    lastBlock = nodeName;\n\n    return {\n      text: text,\n      inlines: Array(text.length).fill(inlineStyle),\n      entities: Array(text.length).fill(inEntity),\n      blocks: []\n    };\n  }\n\n  // save the last block so we can use it later\n  lastBlock = nodeName;\n\n  // BR tags\n  if (nodeName === 'br') {\n    if (lastLastBlock === 'br' && (!inBlock || getBlockTypeForTag(inBlock, lastList, blockRenderMap) === 'unstyled')) {\n      return getBlockDividerChunk('unstyled', depth);\n    }\n    return getSoftNewlineChunk();\n  }\n\n  var chunk = getEmptyChunk();\n  var newChunk = null;\n\n  // Inline tags\n  inlineStyle = processInlineTag(nodeName, node, inlineStyle);\n\n  // Handle lists\n  if (nodeName === 'ul' || nodeName === 'ol') {\n    if (lastList) {\n      depth += 1;\n    }\n    lastList = nodeName;\n  }\n\n  // Block Tags\n  if (!inBlock && blockTags.indexOf(nodeName) !== -1) {\n    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);\n    inBlock = nodeName;\n    newBlock = true;\n  } else if (lastList && inBlock === 'li' && nodeName === 'li') {\n    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);\n    inBlock = nodeName;\n    newBlock = true;\n    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';\n  }\n\n  // Recurse through children\n  var child = node.firstChild;\n  if (child != null) {\n    nodeName = child.nodeName.toLowerCase();\n  }\n\n  var entityId = null;\n  var href = null;\n\n  while (child) {\n    if (nodeName === 'a' && child.href && hasValidLinkText(child)) {\n      href = new URI(child.href).toString();\n      entityId = DraftEntity.create('LINK', 'MUTABLE', { url: href });\n    } else {\n      entityId = undefined;\n    }\n\n    newChunk = genFragment(child, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, entityId || inEntity);\n\n    chunk = joinChunks(chunk, newChunk);\n    var sibling = child.nextSibling;\n\n    // Put in a newline to break up blocks inside blocks\n    if (sibling && blockTags.indexOf(nodeName) >= 0 && inBlock) {\n      chunk = joinChunks(chunk, getSoftNewlineChunk());\n    }\n    if (sibling) {\n      nodeName = sibling.nodeName.toLowerCase();\n    }\n    child = sibling;\n  }\n\n  if (newBlock) {\n    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth));\n  }\n\n  return chunk;\n}\n\nfunction getChunkForHTML(html, DOMBuilder, blockRenderMap) {\n  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE);\n\n  var supportedBlockTags = getBlockMapSupportedTags(blockRenderMap);\n\n  var safeBody = DOMBuilder(html);\n  if (!safeBody) {\n    return null;\n  }\n  lastBlock = null;\n\n  // Sometimes we aren't dealing with content that contains nice semantic\n  // tags. In this case, use divs to separate everything out into paragraphs\n  // and hope for the best.\n  var workingBlocks = containsSemanticBlockMarkup(html, supportedBlockTags) ? supportedBlockTags : ['div'];\n\n  // Start with -1 block depth to offset the fact that we are passing in a fake\n  // UL block to start with.\n  var chunk = genFragment(safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, blockRenderMap);\n\n  // join with previous block to prevent weirdness on paste\n  if (chunk.text.indexOf('\\r') === 0) {\n    chunk = {\n      text: chunk.text.slice(1),\n      inlines: chunk.inlines.slice(1),\n      entities: chunk.entities.slice(1),\n      blocks: chunk.blocks\n    };\n  }\n\n  // Kill block delimiter at the end\n  if (chunk.text.slice(-1) === '\\r') {\n    chunk.text = chunk.text.slice(0, -1);\n    chunk.inlines = chunk.inlines.slice(0, -1);\n    chunk.entities = chunk.entities.slice(0, -1);\n    chunk.blocks.pop();\n  }\n\n  // If we saw no block tags, put an unstyled one in\n  if (chunk.blocks.length === 0) {\n    chunk.blocks.push({ type: 'unstyled', depth: 0 });\n  }\n\n  // Sometimes we start with text that isn't in a block, which is then\n  // followed by blocks. Need to fix up the blocks to add in\n  // an unstyled block for this content\n  if (chunk.text.split('\\r').length === chunk.blocks.length + 1) {\n    chunk.blocks.unshift({ type: 'unstyled', depth: 0 });\n  }\n\n  return chunk;\n}\n\nfunction convertFromHTMLtoContentBlocks(html) {\n  var DOMBuilder = arguments.length <= 1 || arguments[1] === undefined ? getSafeBodyFromHTML : arguments[1];\n  var blockRenderMap = arguments.length <= 2 || arguments[2] === undefined ? DefaultDraftBlockRenderMap : arguments[2];\n\n  // Be ABSOLUTELY SURE that the dom builder you pass hare won't execute\n  // arbitrary code in whatever environment you're running this in. For an\n  // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n\n  var chunk = getChunkForHTML(html, DOMBuilder, blockRenderMap);\n\n  if (chunk == null) {\n    return null;\n  }\n  var start = 0;\n  return chunk.text.split('\\r').map(function (textBlock, ii) {\n    // Make absolutely certain that our text is acceptable.\n    textBlock = sanitizeDraftText(textBlock);\n    var end = start + textBlock.length;\n    var inlines = nullthrows(chunk).inlines.slice(start, end);\n    var entities = nullthrows(chunk).entities.slice(start, end);\n    var characterList = List(inlines.map(function (style, ii) {\n      var data = { style: style, entity: null };\n      if (entities[ii]) {\n        data.entity = entities[ii];\n      }\n      return CharacterMetadata.create(data);\n    }));\n    start = end + 1;\n\n    return new ContentBlock({\n      key: generateRandomKey(),\n      type: nullthrows(chunk).blocks[ii].type,\n      depth: nullthrows(chunk).blocks[ii].depth,\n      text: textBlock,\n      characterList: characterList\n    });\n  });\n}\n\nmodule.exports = convertFromHTMLtoContentBlocks;"]}