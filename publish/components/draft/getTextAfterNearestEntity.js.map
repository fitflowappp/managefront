{"version":3,"sources":["../../../src/components/draft/getTextAfterNearestEntity.js"],"names":["getTextAfterNearestEntity","block","offset","start","getEntityAt","getText","slice","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;;;AAIA;;AAEA,SAASA,yBAAT,CAAmCC,KAAnC,EAA0CC,MAA1C,EAAkD;AAChD,MAAIC,QAAQD,MAAZ;;AAEA;AACA,SAAOC,QAAQ,CAAR,IAAaF,MAAMG,WAAN,CAAkBD,QAAQ,CAA1B,MAAiC,IAArD,EAA2D;AACzDA;AACD;;AAED,SAAOF,MAAMI,OAAN,GAAgBC,KAAhB,CAAsBH,KAAtB,EAA6BD,MAA7B,CAAP;AACD;;AAEDK,OAAOC,OAAP,GAAiBR,yBAAjB","file":"getTextAfterNearestEntity.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getTextAfterNearestEntity\n * @typechecks\n * \n */\n\n/**\n * Find the string of text between the previous entity and the specified\n * offset. This allows us to narrow down search areas for regex matching.\n */\n'use strict';\n\nfunction getTextAfterNearestEntity(block, offset) {\n  var start = offset;\n\n  // Get start based on where the last entity ended.\n  while (start > 0 && block.getEntityAt(start - 1) === null) {\n    start--;\n  }\n\n  return block.getText().slice(start, offset);\n}\n\nmodule.exports = getTextAfterNearestEntity;"]}