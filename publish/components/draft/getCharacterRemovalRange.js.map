{"version":3,"sources":["../../../src/components/draft/getCharacterRemovalRange.js"],"names":["DraftEntity","require","DraftEntitySegments","getRangesForDraftEntity","invariant","getCharacterRemovalRange","block","selectionState","direction","start","getStartOffset","end","getEndOffset","entityKey","getEntityAt","entity","get","mutability","getMutability","entityRanges","filter","range","length","process","env","NODE_ENV","undefined","entityRange","merge","anchorOffset","focusOffset","isBackward","removalRange","getRemovalRange","getText","slice","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;;;;;;;;AASA;;AAEA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;AACA,IAAIC,sBAAsBD,QAAQ,uBAAR,CAA1B;;AAEA,IAAIE,0BAA0BF,QAAQ,2BAAR,CAA9B;AACA,IAAIG,YAAYH,QAAQ,oBAAR,CAAhB;;AAEA,SAASI,wBAAT,CAAkCC,KAAlC,EAAyCC,cAAzC,EAAyDC,SAAzD,EAAoE;AAClE,MAAIC,QAAQF,eAAeG,cAAf,EAAZ;AACA,MAAIC,MAAMJ,eAAeK,YAAf,EAAV;AACA,MAAIC,YAAYP,MAAMQ,WAAN,CAAkBL,KAAlB,CAAhB;AACA,MAAI,CAACI,SAAL,EAAgB;AACd,WAAON,cAAP;AACD;;AAED,MAAIQ,SAASf,YAAYgB,GAAZ,CAAgBH,SAAhB,CAAb;AACA,MAAII,aAAaF,OAAOG,aAAP,EAAjB;;AAEA;AACA;AACA,MAAID,eAAe,SAAnB,EAA8B;AAC5B,WAAOV,cAAP;AACD;;AAED;AACA,MAAIY,eAAehB,wBAAwBG,KAAxB,EAA+BO,SAA/B,EAA0CO,MAA1C,CAAiD,UAAUC,KAAV,EAAiB;AACnF,WAAOZ,QAAQY,MAAMV,GAAd,IAAqBA,MAAMU,MAAMZ,KAAxC;AACD,GAFkB,CAAnB;;AAIA,IAAEU,aAAaG,MAAb,IAAuB,CAAzB,IAA8BC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCrB,UAAU,KAAV,EAAiB,kEAAjB,CAAxC,GAA+HA,UAAU,KAAV,CAA7J,GAAgLsB,SAAhL;;AAEA,MAAIC,cAAcR,aAAa,CAAb,CAAlB;;AAEA;AACA,MAAIF,eAAe,WAAnB,EAAgC;AAC9B,WAAOV,eAAeqB,KAAf,CAAqB;AAC1BC,oBAAcF,YAAYlB,KADA;AAE1BqB,mBAAaH,YAAYhB,GAFC;AAG1BoB,kBAAY;AAHc,KAArB,CAAP;AAKD;;AAED;AACA;AACA,MAAIC,eAAe9B,oBAAoB+B,eAApB,CAAoCxB,KAApC,EAA2CE,GAA3C,EAAgDL,MAAM4B,OAAN,GAAgBC,KAAhB,CAAsBR,YAAYlB,KAAlC,EAAyCkB,YAAYhB,GAArD,CAAhD,EAA2GgB,YAAYlB,KAAvH,EAA8HD,SAA9H,CAAnB;;AAEA,SAAOD,eAAeqB,KAAf,CAAqB;AAC1BC,kBAAcG,aAAavB,KADD;AAE1BqB,iBAAaE,aAAarB,GAFA;AAG1BoB,gBAAY;AAHc,GAArB,CAAP;AAKD;;AAEDK,OAAOC,OAAP,GAAiBhC,wBAAjB","file":"getCharacterRemovalRange.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getCharacterRemovalRange\n * @typechecks\n * \n */\n\n/**\n * Given a SelectionState and a removal direction, determine the entire range\n * that should be removed from a ContentState. This is based on any entities\n * within the target, with their `mutability` values taken into account.\n *\n * For instance, if we are attempting to remove part of an \"immutable\" entity\n * range, the entire entity must be removed. The returned `SelectionState`\n * will be adjusted accordingly.\n */\n'use strict';\n\nvar DraftEntity = require('./DraftEntity');\nvar DraftEntitySegments = require('./DraftEntitySegments');\n\nvar getRangesForDraftEntity = require('./getRangesForDraftEntity');\nvar invariant = require('fbjs/lib/invariant');\n\nfunction getCharacterRemovalRange(block, selectionState, direction) {\n  var start = selectionState.getStartOffset();\n  var end = selectionState.getEndOffset();\n  var entityKey = block.getEntityAt(start);\n  if (!entityKey) {\n    return selectionState;\n  }\n\n  var entity = DraftEntity.get(entityKey);\n  var mutability = entity.getMutability();\n\n  // `MUTABLE` entities can just have the specified range of text removed\n  // directly. No adjustments are needed.\n  if (mutability === 'MUTABLE') {\n    return selectionState;\n  }\n\n  // Find the entity range that overlaps with our removal range.\n  var entityRanges = getRangesForDraftEntity(block, entityKey).filter(function (range) {\n    return start < range.end && end > range.start;\n  });\n\n  !(entityRanges.length == 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There should only be one entity range within this removal range.') : invariant(false) : undefined;\n\n  var entityRange = entityRanges[0];\n\n  // For `IMMUTABLE` entity types, we will remove the entire entity range.\n  if (mutability === 'IMMUTABLE') {\n    return selectionState.merge({\n      anchorOffset: entityRange.start,\n      focusOffset: entityRange.end,\n      isBackward: false\n    });\n  }\n\n  // For `SEGMENTED` entity types, determine the appropriate segment to\n  // remove.\n  var removalRange = DraftEntitySegments.getRemovalRange(start, end, block.getText().slice(entityRange.start, entityRange.end), entityRange.start, direction);\n\n  return selectionState.merge({\n    anchorOffset: removalRange.start,\n    focusOffset: removalRange.end,\n    isBackward: false\n  });\n}\n\nmodule.exports = getCharacterRemovalRange;"]}