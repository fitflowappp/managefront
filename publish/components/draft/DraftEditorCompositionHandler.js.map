{"version":3,"sources":["../../../src/components/draft/DraftEditorCompositionHandler.js"],"names":["DraftModifier","require","EditorState","Keys","getEntityKeyForSelection","isSelectionAtLeafStart","RESOLVE_DELAY","resolved","stillComposing","textInputData","DraftEditorCompositionHandler","onBeforeInput","e","data","onCompositionStart","onCompositionEnd","_this","setTimeout","resolveComposition","call","onKeyDown","which","RIGHT","LEFT","preventDefault","onKeyPress","RETURN","composedChars","editorState","set","props","inCompositionMode","currentStyle","getCurrentInlineStyle","entityKey","getCurrentContent","getSelection","mustReset","size","restoreEditorDOM","exitCurrentMode","removeRenderGuard","contentState","replaceText","update","push","nativelyRenderedContent","forceSelection","module","exports"],"mappings":"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","file":"DraftEditorCompositionHandler.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEditorCompositionHandler\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Keys = require('fbjs/lib/Keys');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\n\n/**\n * Millisecond delay to allow `compositionstart` to fire again upon\n * `compositionend`.\n *\n * This is used for Korean input to ensure that typing can continue without\n * the editor trying to render too quickly. More specifically, Safari 7.1+\n * triggers `compositionstart` a little slower than Chrome/FF, which\n * leads to composed characters being resolved and re-render occurring\n * sooner than we want.\n */\nvar RESOLVE_DELAY = 20;\n\n/**\n * A handful of variables used to track the current composition and its\n * resolution status. These exist at the module level because it is not\n * possible to have compositions occurring in multiple editors simultaneously,\n * and it simplifies state management with respect to the DraftEditor component.\n */\nvar resolved = false;\nvar stillComposing = false;\nvar textInputData = '';\n\nvar DraftEditorCompositionHandler = {\n  onBeforeInput: function onBeforeInput(e) {\n    textInputData = (textInputData || '') + e.data;\n  },\n\n  /**\n   * A `compositionstart` event has fired while we're still in composition\n   * mode. Continue the current composition session to prevent a re-render.\n   */\n  onCompositionStart: function onCompositionStart() {\n    stillComposing = true;\n  },\n\n  /**\n   * Attempt to end the current composition session.\n   *\n   * Defer handling because browser will still insert the chars into active\n   * element after `compositionend`. If a `compositionstart` event fires\n   * before `resolveComposition` executes, our composition session will\n   * continue.\n   *\n   * The `resolved` flag is useful because certain IME interfaces fire the\n   * `compositionend` event multiple times, thus queueing up multiple attempts\n   * at handling the composition. Since handling the same composition event\n   * twice could break the DOM, we only use the first event. Example: Arabic\n   * Google Input Tools on Windows 8.1 fires `compositionend` three times.\n   */\n  onCompositionEnd: function onCompositionEnd() {\n    var _this = this;\n\n    resolved = false;\n    stillComposing = false;\n    setTimeout(function () {\n      if (!resolved) {\n        DraftEditorCompositionHandler.resolveComposition.call(_this);\n      }\n    }, RESOLVE_DELAY);\n  },\n\n  /**\n   * In Safari, keydown events may fire when committing compositions. If\n   * the arrow keys are used to commit, prevent default so that the cursor\n   * doesn't move, otherwise it will jump back noticeably on re-render.\n   */\n  onKeyDown: function onKeyDown(e) {\n    if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {\n      e.preventDefault();\n    }\n  },\n\n  /**\n   * Keypress events may fire when committing compositions. In Firefox,\n   * pressing RETURN commits the composition and inserts extra newline\n   * characters that we do not want. `preventDefault` allows the composition\n   * to be committed while preventing the extra characters.\n   */\n  onKeyPress: function onKeyPress(e) {\n    if (e.which === Keys.RETURN) {\n      e.preventDefault();\n    }\n  },\n\n  /**\n   * Attempt to insert composed characters into the document.\n   *\n   * If we are still in a composition session, do nothing. Otherwise, insert\n   * the characters into the document and terminate the composition session.\n   *\n   * If no characters were composed -- for instance, the user\n   * deleted all composed characters and committed nothing new --\n   * force a re-render. We also re-render when the composition occurs\n   * at the beginning of a leaf, to ensure that if the browser has\n   * created a new text node for the composition, we will discard it.\n   *\n   * Resetting innerHTML will move focus to the beginning of the editor,\n   * so we update to force it back to the correct place.\n   */\n  resolveComposition: function resolveComposition() {\n    if (stillComposing) {\n      return;\n    }\n\n    resolved = true;\n    var composedChars = textInputData;\n    textInputData = '';\n\n    var editorState = EditorState.set(this.props.editorState, {\n      inCompositionMode: false\n    });\n\n    var currentStyle = editorState.getCurrentInlineStyle();\n    var entityKey = getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection());\n\n    var mustReset = !composedChars || isSelectionAtLeafStart(editorState) || currentStyle.size > 0 || entityKey !== null;\n\n    if (mustReset) {\n      this.restoreEditorDOM();\n    }\n\n    this.exitCurrentMode();\n    this.removeRenderGuard();\n\n    if (composedChars) {\n      // If characters have been composed, re-rendering with the update\n      // is sufficient to reset the editor.\n      var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), composedChars, currentStyle, entityKey);\n      this.update(EditorState.push(editorState, contentState, 'insert-characters'));\n      return;\n    }\n\n    if (mustReset) {\n      this.update(EditorState.set(editorState, {\n        nativelyRenderedContent: null,\n        forceSelection: true\n      }));\n    }\n  }\n};\n\nmodule.exports = DraftEditorCompositionHandler;"]}