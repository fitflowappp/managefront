{"version":3,"sources":["../../../src/components/draft/getSampleStateForTesting.js"],"names":["BlockMapBuilder","require","CharacterMetadata","ContentBlock","ContentState","EditorState","Immutable","SampleDraftInlineStyle","SelectionState","BOLD","ITALIC","ENTITY_KEY","BLOCKS","key","type","text","characterList","List","Repeat","EMPTY","create","style","entity","selectionState","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","hasFocus","blockMap","createFromArray","contentState","selectionBefore","selectionAfter","editorState","createWithContent","forceSelection","getSampleStateForTesting","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;AAEA,IAAIA,kBAAkBC,QAAQ,mBAAR,CAAtB;AACA,IAAIC,oBAAoBD,QAAQ,qBAAR,CAAxB;AACA,IAAIE,eAAeF,QAAQ,gBAAR,CAAnB;AACA,IAAIG,eAAeH,QAAQ,gBAAR,CAAnB;AACA,IAAII,cAAcJ,QAAQ,eAAR,CAAlB;AACA,IAAIK,YAAYL,QAAQ,WAAR,CAAhB;AACA,IAAIM,yBAAyBN,QAAQ,0BAAR,CAA7B;AACA,IAAIO,iBAAiBP,QAAQ,kBAAR,CAArB;;AAEA,IAAIQ,OAAOF,uBAAuBE,IAAlC;AACA,IAAIC,SAASH,uBAAuBG,MAApC;;AAEA,IAAIC,aAAa,KAAjB;;AAEA,IAAIC,SAAS,CAAC,IAAIT,YAAJ,CAAiB;AAC7BU,OAAK,GADwB;AAE7BC,QAAM,UAFuB;AAG7BC,QAAM,OAHuB;AAI7BC,iBAAeV,UAAUW,IAAV,CAAeX,UAAUY,MAAV,CAAiBhB,kBAAkBiB,KAAnC,EAA0C,CAA1C,CAAf;AAJc,CAAjB,CAAD,EAKT,IAAIhB,YAAJ,CAAiB;AACnBU,OAAK,GADc;AAEnBC,QAAM,qBAFa;AAGnBC,QAAM,OAHa;AAInBC,iBAAeV,UAAUW,IAAV,CAAeX,UAAUY,MAAV,CAAiBhB,kBAAkBkB,MAAlB,CAAyB,EAAEC,OAAOZ,IAAT,EAAea,QAAQX,UAAvB,EAAzB,CAAjB,EAAgF,CAAhF,CAAf;AAJI,CAAjB,CALS,EAUT,IAAIR,YAAJ,CAAiB;AACnBU,OAAK,GADc;AAEnBC,QAAM,YAFa;AAGnBC,QAAM,SAHa;AAInBC,iBAAeV,UAAUW,IAAV,CAAeX,UAAUY,MAAV,CAAiBhB,kBAAkBkB,MAAlB,CAAyB,EAAEC,OAAOX,MAAT,EAAiBY,QAAQ,IAAzB,EAAzB,CAAjB,EAA4E,CAA5E,CAAf;AAJI,CAAjB,CAVS,CAAb;;AAiBA,IAAIC,iBAAiB,IAAIf,cAAJ,CAAmB;AACtCgB,aAAW,GAD2B;AAEtCC,gBAAc,CAFwB;AAGtCC,YAAU,GAH4B;AAItCC,eAAa,CAJyB;AAKtCC,cAAY,KAL0B;AAMtCC,YAAU;AAN4B,CAAnB,CAArB;;AASA,IAAIC,WAAW9B,gBAAgB+B,eAAhB,CAAgCnB,MAAhC,CAAf;AACA,IAAIoB,eAAe,IAAI5B,YAAJ,CAAiB;AAClC0B,YAAUA,QADwB;AAElCG,mBAAiBV,cAFiB;AAGlCW,kBAAgBX;AAHkB,CAAjB,CAAnB;;AAMA,IAAIY,cAAc9B,YAAY+B,iBAAZ,CAA8BJ,YAA9B,CAAlB;AACAG,cAAc9B,YAAYgC,cAAZ,CAA2BF,WAA3B,EAAwCZ,cAAxC,CAAd;;AAEA,SAASe,wBAAT,GAAoC;AAClC,SAAO,EAAEH,aAAaA,WAAf,EAA4BH,cAAcA,YAA1C,EAAwDT,gBAAgBA,cAAxE,EAAP;AACD;;AAEDgB,OAAOC,OAAP,GAAiBF,wBAAjB","file":"getSampleStateForTesting.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getSampleStateForTesting\n * @typechecks\n * \n */\n\n'use strict';\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentState = require('./ContentState');\nvar EditorState = require('./EditorState');\nvar Immutable = require('immutable');\nvar SampleDraftInlineStyle = require('./SampleDraftInlineStyle');\nvar SelectionState = require('./SelectionState');\n\nvar BOLD = SampleDraftInlineStyle.BOLD;\nvar ITALIC = SampleDraftInlineStyle.ITALIC;\n\nvar ENTITY_KEY = '123';\n\nvar BLOCKS = [new ContentBlock({\n  key: 'a',\n  type: 'unstyled',\n  text: 'Alpha',\n  characterList: Immutable.List(Immutable.Repeat(CharacterMetadata.EMPTY, 5))\n}), new ContentBlock({\n  key: 'b',\n  type: 'unordered-list-item',\n  text: 'Bravo',\n  characterList: Immutable.List(Immutable.Repeat(CharacterMetadata.create({ style: BOLD, entity: ENTITY_KEY }), 5))\n}), new ContentBlock({\n  key: 'c',\n  type: 'blockquote',\n  text: 'Charlie',\n  characterList: Immutable.List(Immutable.Repeat(CharacterMetadata.create({ style: ITALIC, entity: null }), 7))\n})];\n\nvar selectionState = new SelectionState({\n  anchorKey: 'a',\n  anchorOffset: 0,\n  focusKey: 'a',\n  focusOffset: 0,\n  isBackward: false,\n  hasFocus: true\n});\n\nvar blockMap = BlockMapBuilder.createFromArray(BLOCKS);\nvar contentState = new ContentState({\n  blockMap: blockMap,\n  selectionBefore: selectionState,\n  selectionAfter: selectionState\n});\n\nvar editorState = EditorState.createWithContent(contentState);\neditorState = EditorState.forceSelection(editorState, selectionState);\n\nfunction getSampleStateForTesting() {\n  return { editorState: editorState, contentState: contentState, selectionState: selectionState };\n}\n\nmodule.exports = getSampleStateForTesting;"]}