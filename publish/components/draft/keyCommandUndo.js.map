{"version":3,"sources":["../../../src/components/draft/keyCommandUndo.js"],"names":["EditorState","require","keyCommandUndo","e","editorState","updateFn","undoneState","undo","getLastChangeType","nativelyRenderedContent","getCurrentContent","set","preventDefault","getNativelyRenderedContent","setTimeout","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;;AAEA,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,WAA3B,EAAwCC,QAAxC,EAAkD;AAChD,MAAIC,cAAcN,YAAYO,IAAZ,CAAiBH,WAAjB,CAAlB;;AAEA;AACA;AACA;AACA;AACA,MAAIA,YAAYI,iBAAZ,OAAoC,mBAAxC,EAA6D;AAC3D,QAAIC,0BAA0BH,YAAYI,iBAAZ,EAA9B;AACAL,aAASL,YAAYW,GAAZ,CAAgBL,WAAhB,EAA6B,EAAEG,yBAAyBA,uBAA3B,EAA7B,CAAT;AACA;AACD;;AAED;AACAN,IAAES,cAAF;AACA,MAAI,CAACR,YAAYS,0BAAZ,EAAL,EAA+C;AAC7CR,aAASC,WAAT;AACA;AACD;;AAED;AACA;AACAD,WAASL,YAAYW,GAAZ,CAAgBP,WAAhB,EAA6B,EAAEK,yBAAyB,IAA3B,EAA7B,CAAT;;AAEA;AACA;AACAK,aAAW,YAAY;AACrBT,aAASC,WAAT;AACD,GAFD,EAEG,CAFH;AAGD;;AAEDS,OAAOC,OAAP,GAAiBd,cAAjB","file":"keyCommandUndo.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyCommandUndo\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\n\nfunction keyCommandUndo(e, editorState, updateFn) {\n  var undoneState = EditorState.undo(editorState);\n\n  // If the last change to occur was a spellcheck change, allow the undo\n  // event to fall through to the browser. This allows the browser to record\n  // the unwanted change, which should soon lead it to learn not to suggest\n  // the correction again.\n  if (editorState.getLastChangeType() === 'spellcheck-change') {\n    var nativelyRenderedContent = undoneState.getCurrentContent();\n    updateFn(EditorState.set(undoneState, { nativelyRenderedContent: nativelyRenderedContent }));\n    return;\n  }\n\n  // Otheriwse, manage the undo behavior manually.\n  e.preventDefault();\n  if (!editorState.getNativelyRenderedContent()) {\n    updateFn(undoneState);\n    return;\n  }\n\n  // Trigger a re-render with the current content state to ensure that the\n  // component tree has up-to-date props for comparison.\n  updateFn(EditorState.set(editorState, { nativelyRenderedContent: null }));\n\n  // Wait to ensure that the re-render has occurred before performing\n  // the undo action.\n  setTimeout(function () {\n    updateFn(undoneState);\n  }, 0);\n}\n\nmodule.exports = keyCommandUndo;"]}