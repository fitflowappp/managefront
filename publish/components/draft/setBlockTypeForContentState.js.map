{"version":3,"sources":["../../../src/components/draft/setBlockTypeForContentState.js"],"names":["Immutable","require","setBlockTypeForContentState","contentState","selectionState","blockType","startKey","getStartKey","endKey","getEndKey","blockMap","getBlockMap","newBlocks","toSeq","skipUntil","_","k","takeUntil","concat","Map","get","map","block","merge","type","depth","selectionBefore","selectionAfter","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;AAEA,IAAIA,YAAYC,QAAQ,WAAR,CAAhB;;AAEA,SAASC,2BAAT,CAAqCC,YAArC,EAAmDC,cAAnD,EAAmEC,SAAnE,EAA8E;AAC5E,MAAIC,WAAWF,eAAeG,WAAf,EAAf;AACA,MAAIC,SAASJ,eAAeK,SAAf,EAAb;AACA,MAAIC,WAAWP,aAAaQ,WAAb,EAAf;AACA,MAAIC,YAAYF,SAASG,KAAT,GAAiBC,SAAjB,CAA2B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACzD,WAAOA,MAAMV,QAAb;AACD,GAFe,EAEbW,SAFa,CAEH,UAAUF,CAAV,EAAaC,CAAb,EAAgB;AAC3B,WAAOA,MAAMR,MAAb;AACD,GAJe,EAIbU,MAJa,CAINlB,UAAUmB,GAAV,CAAc,CAAC,CAACX,MAAD,EAASE,SAASU,GAAT,CAAaZ,MAAb,CAAT,CAAD,CAAd,CAJM,EAI2Ca,GAJ3C,CAI+C,UAAUC,KAAV,EAAiB;AAC9E,WAAOA,MAAMC,KAAN,CAAY,EAAEC,MAAMnB,SAAR,EAAmBoB,OAAO,CAA1B,EAAZ,CAAP;AACD,GANe,CAAhB;;AAQA,SAAOtB,aAAaoB,KAAb,CAAmB;AACxBb,cAAUA,SAASa,KAAT,CAAeX,SAAf,CADc;AAExBc,qBAAiBtB,cAFO;AAGxBuB,oBAAgBvB;AAHQ,GAAnB,CAAP;AAKD;;AAEDwB,OAAOC,OAAP,GAAiB3B,2BAAjB","file":"setBlockTypeForContentState.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setBlockTypeForContentState\n * @typechecks\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nfunction setBlockTypeForContentState(contentState, selectionState, blockType) {\n  var startKey = selectionState.getStartKey();\n  var endKey = selectionState.getEndKey();\n  var blockMap = contentState.getBlockMap();\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).concat(Immutable.Map([[endKey, blockMap.get(endKey)]])).map(function (block) {\n    return block.merge({ type: blockType, depth: 0 });\n  });\n\n  return contentState.merge({\n    blockMap: blockMap.merge(newBlocks),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n}\n\nmodule.exports = setBlockTypeForContentState;"]}