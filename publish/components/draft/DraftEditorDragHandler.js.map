{"version":3,"sources":["../../../src/components/draft/DraftEditorDragHandler.js"],"names":["DataTransfer","require","DraftModifier","EditorState","findAncestorOffsetKey","getTextContentFromFiles","getUpdatedSelectionState","nullthrows","getSelectionForEvent","event","editorState","node","offset","document","caretRangeFromPoint","dropRange","x","y","startContainer","startOffset","rangeParent","rangeOffset","offsetKey","DraftEditorDragHandler","onDragEnd","exitCurrentMode","onDrop","e","_this","data","nativeEvent","dataTransfer","props","dropSelection","preventDefault","files","getFiles","length","handleDroppedFiles","fileText","update","insertTextAtSelection","dragType","_internalDrag","handleDrop","moveText","getText","targetSelection","newContentState","getCurrentContent","getSelection","push","selection","text","insertText","getCurrentInlineStyle","module","exports"],"mappings":"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","file":"DraftEditorDragHandler.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEditorDragHandler\n * @typechecks\n * \n */\n\n/**\n * Get a SelectionState for the supplied mouse event.\n */\n'use strict';\n\nvar DataTransfer = require('fbjs/lib/DataTransfer');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\n\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\nvar getTextContentFromFiles = require('./getTextContentFromFiles');\nvar getUpdatedSelectionState = require('./getUpdatedSelectionState');\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nfunction getSelectionForEvent(event, editorState) {\n  var node = null;\n  var offset = null;\n\n  if (document.caretRangeFromPoint) {\n    var dropRange = document.caretRangeFromPoint(event.x, event.y);\n    node = dropRange.startContainer;\n    offset = dropRange.startOffset;\n  } else if (event.rangeParent) {\n    node = event.rangeParent;\n    offset = event.rangeOffset;\n  } else {\n    return null;\n  }\n\n  node = nullthrows(node);\n  offset = nullthrows(offset);\n  var offsetKey = nullthrows(findAncestorOffsetKey(node));\n\n  return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);\n}\n\nvar DraftEditorDragHandler = {\n  /**\n   * Drag originating from input terminated.\n   */\n  onDragEnd: function onDragEnd() {\n    this.exitCurrentMode();\n  },\n\n  /**\n   * Handle data being dropped.\n   */\n  onDrop: function onDrop(e) {\n    var _this = this;\n\n    var data = new DataTransfer(e.nativeEvent.dataTransfer);\n\n    var editorState = this.props.editorState;\n    var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);\n\n    e.preventDefault();\n    this.exitCurrentMode();\n\n    if (dropSelection == null) {\n      return;\n    }\n\n    var files = data.getFiles();\n    if (files.length > 0) {\n      if (this.props.handleDroppedFiles && this.props.handleDroppedFiles(dropSelection, files)) {\n        return;\n      }\n\n      getTextContentFromFiles(files, function (fileText) {\n        fileText && _this.update(insertTextAtSelection(editorState, nullthrows(dropSelection), // flow wtf\n        fileText));\n      });\n      return;\n    }\n\n    var dragType = this._internalDrag ? 'internal' : 'external';\n    if (this.props.handleDrop && this.props.handleDrop(dropSelection, data, dragType)) {\n      return;\n    }\n\n    if (this._internalDrag) {\n      this.update(moveText(editorState, dropSelection));\n      return;\n    }\n\n    this.update(insertTextAtSelection(editorState, dropSelection, data.getText()));\n  }\n\n};\n\nfunction moveText(editorState, targetSelection) {\n  var newContentState = DraftModifier.moveText(editorState.getCurrentContent(), editorState.getSelection(), targetSelection);\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\n}\n\n/**\n * Insert text at a specified selection.\n */\nfunction insertTextAtSelection(editorState, selection, text) {\n  var newContentState = DraftModifier.insertText(editorState.getCurrentContent(), selection, text, editorState.getCurrentInlineStyle());\n  return EditorState.push(editorState, newContentState, 'insert-fragment');\n}\n\nmodule.exports = DraftEditorDragHandler;"]}