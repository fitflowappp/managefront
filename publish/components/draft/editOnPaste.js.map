{"version":3,"sources":["../../../src/components/draft/editOnPaste.js"],"names":["BlockMapBuilder","require","CharacterMetadata","DataTransfer","DraftModifier","DraftPasteProcessor","EditorState","getEntityKeyForSelection","getTextContentFromFiles","splitTextIntoTextBlocks","editOnPaste","e","_this","preventDefault","data","clipboardData","isRichText","files","getFiles","defaultFileText","getText","length","props","handlePastedFiles","fileText","editorState","blocks","character","create","style","getCurrentInlineStyle","entity","getCurrentContent","getSelection","text","processText","fragment","createFromArray","withInsertedText","replaceWithFragment","update","push","textBlocks","html","getHTML","handlePastedText","stripPastedStyles","internalClipboard","getClipboard","indexOf","getEditorKey","size","first","insertFragment","htmlFragment","processHTML","blockRenderMap","htmlMap","setClipboard","textFragment","textMap","newContent","module","exports"],"mappings":"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","file":"editOnPaste.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnPaste\n * \n */\n\n/**\n * Paste content.\n */\n'use strict';\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar DataTransfer = require('fbjs/lib/DataTransfer');\nvar DraftModifier = require('./DraftModifier');\nvar DraftPasteProcessor = require('./DraftPasteProcessor');\nvar EditorState = require('./EditorState');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar getTextContentFromFiles = require('./getTextContentFromFiles');\nvar splitTextIntoTextBlocks = require('./splitTextIntoTextBlocks');\n\nfunction editOnPaste(e) {\n  var _this = this;\n\n  e.preventDefault();\n  var data = new DataTransfer(e.clipboardData);\n\n  // Get files, unless this is likely to be a string the user wants inline.\n  if (!data.isRichText()) {\n    var files = data.getFiles();\n    var defaultFileText = data.getText();\n    if (files.length > 0) {\n      // Allow customized paste handling for images, etc. Otherwise, fall\n      // through to insert text contents into the editor.\n      if (this.props.handlePastedFiles && this.props.handlePastedFiles(files)) {\n        return;\n      }\n\n      getTextContentFromFiles(files, function ( /*string*/fileText) {\n        fileText = fileText || defaultFileText;\n        if (!fileText) {\n          return;\n        }\n\n        var editorState = _this.props.editorState;\n\n        var blocks = splitTextIntoTextBlocks(fileText);\n        var character = CharacterMetadata.create({\n          style: editorState.getCurrentInlineStyle(),\n          entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n        });\n\n        var text = DraftPasteProcessor.processText(blocks, character);\n        var fragment = BlockMapBuilder.createFromArray(text);\n\n        var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n\n        _this.update(EditorState.push(editorState, withInsertedText, 'insert-fragment'));\n      });\n\n      return;\n    }\n  }\n\n  var textBlocks = [];\n  var text = data.getText();\n  var html = data.getHTML();\n\n  if (this.props.handlePastedText && this.props.handlePastedText(text, html)) {\n    return;\n  }\n\n  if (text) {\n    textBlocks = splitTextIntoTextBlocks(text);\n  }\n\n  if (!this.props.stripPastedStyles) {\n    // If the text from the paste event is rich content that matches what we\n    // already have on the internal clipboard, assume that we should just use\n    // the clipboard fragment for the paste. This will allow us to preserve\n    // styling and entities, if any are present. Note that newlines are\n    // stripped during comparison -- this is because copy/paste within the\n    // editor in Firefox and IE will not include empty lines. The resulting\n    // paste will preserve the newlines correctly.\n    var internalClipboard = this.getClipboard();\n    if (data.isRichText() && internalClipboard) {\n      if (\n      // If the editorKey is present in the pasted HTML, it should be safe to\n      // assume this is an internal paste.\n      html.indexOf(this.getEditorKey()) !== -1 ||\n      // The copy may have been made within a single block, in which case the\n      // editor key won't be part of the paste. In this case, just check\n      // whether the pasted text matches the internal clipboard.\n      textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {\n        this.update(insertFragment(this.props.editorState, internalClipboard));\n        return;\n      }\n    }\n\n    // If there is html paste data, try to parse that.\n    if (html) {\n      var htmlFragment = DraftPasteProcessor.processHTML(html, this.props.blockRenderMap);\n      if (htmlFragment) {\n        var htmlMap = BlockMapBuilder.createFromArray(htmlFragment);\n        this.update(insertFragment(this.props.editorState, htmlMap));\n        return;\n      }\n    }\n    // Otherwise, create a new fragment from our pasted text. Also\n    // empty the internal clipboard, since it's no longer valid.\n    this.setClipboard(null);\n  }\n\n  if (textBlocks) {\n    var editorState = this.props.editorState;\n\n    var character = CharacterMetadata.create({\n      style: editorState.getCurrentInlineStyle(),\n      entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n    });\n\n    var textFragment = DraftPasteProcessor.processText(textBlocks, character);\n\n    var textMap = BlockMapBuilder.createFromArray(textFragment);\n    this.update(insertFragment(this.props.editorState, textMap));\n  }\n}\n\nfunction insertFragment(editorState, fragment) {\n  var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n  return EditorState.push(editorState, newContent, 'insert-fragment');\n}\n\nmodule.exports = editOnPaste;"]}