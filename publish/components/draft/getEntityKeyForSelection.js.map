{"version":3,"sources":["../../../src/components/draft/getEntityKeyForSelection.js"],"names":["DraftEntity","require","getEntityKeyForSelection","contentState","targetSelection","entityKey","isCollapsed","key","getAnchorKey","offset","getAnchorOffset","getBlockForKey","getEntityAt","filterKey","startKey","getStartKey","startOffset","getStartOffset","startBlock","getLength","entity","get","getMutability","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;;;;AAKA;;AAEA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;;AAEA,SAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,eAAhD,EAAiE;AAC/D,MAAIC,SAAJ;;AAEA,MAAID,gBAAgBE,WAAhB,EAAJ,EAAmC;AACjC,QAAIC,MAAMH,gBAAgBI,YAAhB,EAAV;AACA,QAAIC,SAASL,gBAAgBM,eAAhB,EAAb;AACA,QAAID,SAAS,CAAb,EAAgB;AACdJ,kBAAYF,aAAaQ,cAAb,CAA4BJ,GAA5B,EAAiCK,WAAjC,CAA6CH,SAAS,CAAtD,CAAZ;AACA,aAAOI,UAAUR,SAAV,CAAP;AACD;AACD,WAAO,IAAP;AACD;;AAED,MAAIS,WAAWV,gBAAgBW,WAAhB,EAAf;AACA,MAAIC,cAAcZ,gBAAgBa,cAAhB,EAAlB;AACA,MAAIC,aAAaf,aAAaQ,cAAb,CAA4BG,QAA5B,CAAjB;;AAEAT,cAAYW,gBAAgBE,WAAWC,SAAX,EAAhB,GAAyC,IAAzC,GAAgDD,WAAWN,WAAX,CAAuBI,WAAvB,CAA5D;;AAEA,SAAOH,UAAUR,SAAV,CAAP;AACD;;AAED;;;;AAIA,SAASQ,SAAT,CAAmBR,SAAnB,EAA8B;AAC5B,MAAIA,SAAJ,EAAe;AACb,QAAIe,SAASpB,YAAYqB,GAAZ,CAAgBhB,SAAhB,CAAb;AACA,WAAOe,OAAOE,aAAP,OAA2B,SAA3B,GAAuCjB,SAAvC,GAAmD,IAA1D;AACD;AACD,SAAO,IAAP;AACD;;AAEDkB,OAAOC,OAAP,GAAiBtB,wBAAjB","file":"getEntityKeyForSelection.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEntityKeyForSelection\n * @typechecks\n * \n */\n\n/**\n * Return the entity key that should be used when inserting text for the\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\n * and `SEGMENTED` entities should not be used for insertion behavior.\n */\n'use strict';\n\nvar DraftEntity = require('./DraftEntity');\n\nfunction getEntityKeyForSelection(contentState, targetSelection) {\n  var entityKey;\n\n  if (targetSelection.isCollapsed()) {\n    var key = targetSelection.getAnchorKey();\n    var offset = targetSelection.getAnchorOffset();\n    if (offset > 0) {\n      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n      return filterKey(entityKey);\n    }\n    return null;\n  }\n\n  var startKey = targetSelection.getStartKey();\n  var startOffset = targetSelection.getStartOffset();\n  var startBlock = contentState.getBlockForKey(startKey);\n\n  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n\n  return filterKey(entityKey);\n}\n\n/**\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\n * return it. If not, return null.\n */\nfunction filterKey(entityKey) {\n  if (entityKey) {\n    var entity = DraftEntity.get(entityKey);\n    return entity.getMutability() === 'MUTABLE' ? entityKey : null;\n  }\n  return null;\n}\n\nmodule.exports = getEntityKeyForSelection;"]}