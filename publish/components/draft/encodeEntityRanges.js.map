{"version":3,"sources":["../../../src/components/draft/encodeEntityRanges.js"],"names":["DraftStringKey","require","UnicodeUtils","strlen","encodeEntityRanges","block","storageMap","encoded","findEntityRanges","character","getEntity","start","end","text","getText","key","getEntityAt","push","offset","slice","length","Number","stringify","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;AAEA,IAAIA,iBAAiBC,QAAQ,kBAAR,CAArB;AACA,IAAIC,eAAeD,QAAQ,uBAAR,CAAnB;;AAEA,IAAIE,SAASD,aAAaC,MAA1B;;AAEA;;;AAGA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,UAAnC,EAA+C;AAC7C,MAAIC,UAAU,EAAd;AACAF,QAAMG,gBAAN,CAAuB,UAAUC,SAAV,EAAqB;AAC1C,WAAO,CAAC,CAACA,UAAUC,SAAV,EAAT;AACD,GAFD,EAEG,WAAW,UAAUC,KAArB,EAA4B,UAAUC,GAAtC,EAA2C;AAC5C,QAAIC,OAAOR,MAAMS,OAAN,EAAX;AACA,QAAIC,MAAMV,MAAMW,WAAN,CAAkBL,KAAlB,CAAV;AACAJ,YAAQU,IAAR,CAAa;AACXC,cAAQf,OAAOU,KAAKM,KAAL,CAAW,CAAX,EAAcR,KAAd,CAAP,CADG;AAEXS,cAAQjB,OAAOU,KAAKM,KAAL,CAAWR,KAAX,EAAkBC,GAAlB,CAAP,CAFG;AAGX;AACAG,WAAKM,OAAOf,WAAWN,eAAesB,SAAf,CAAyBP,GAAzB,CAAX,CAAP;AAJM,KAAb;AAMD,GAXD;AAYA,SAAOR,OAAP;AACD;;AAEDgB,OAAOC,OAAP,GAAiBpB,kBAAjB","file":"encodeEntityRanges.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule encodeEntityRanges\n * @typechecks\n * \n */\n\n'use strict';\n\nvar DraftStringKey = require('./DraftStringKey');\nvar UnicodeUtils = require('fbjs/lib/UnicodeUtils');\n\nvar strlen = UnicodeUtils.strlen;\n\n/**\n * Convert to UTF-8 character counts for storage.\n */\nfunction encodeEntityRanges(block, storageMap) {\n  var encoded = [];\n  block.findEntityRanges(function (character) {\n    return !!character.getEntity();\n  }, function ( /*number*/start, /*number*/end) {\n    var text = block.getText();\n    var key = block.getEntityAt(start);\n    encoded.push({\n      offset: strlen(text.slice(0, start)),\n      length: strlen(text.slice(start, end)),\n      // Encode the key as a number for range storage.\n      key: Number(storageMap[DraftStringKey.stringify(key)])\n    });\n  });\n  return encoded;\n}\n\nmodule.exports = encodeEntityRanges;"]}