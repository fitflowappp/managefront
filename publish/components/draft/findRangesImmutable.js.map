{"version":3,"sources":["../../../src/components/draft/findRangesImmutable.js"],"names":["findRangesImmutable","haystack","areEqualFn","filterFn","foundFn","size","cursor","reduce","value","nextValue","nextIndex","last","count","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;;;;;;AAOA;;AAEA,SAASA,mBAAT,CAA6BC,QAA7B,EAAuCC,UAAvC,EAAmDC,QAAnD,EAA6DC,OAA7D,EAAsE;AACpE,MAAI,CAACH,SAASI,IAAd,EAAoB;AAClB;AACD;;AAED,MAAIC,SAAS,CAAb;;AAEAL,WAASM,MAAT,CAAgB,UAAUC,KAAV,EAAiBC,SAAjB,EAA4BC,SAA5B,EAAuC;AACrD,QAAI,CAACR,WAAWM,KAAX,EAAkBC,SAAlB,CAAL,EAAmC;AACjC,UAAIN,SAASK,KAAT,CAAJ,EAAqB;AACnBJ,gBAAQE,MAAR,EAAgBI,SAAhB;AACD;AACDJ,eAASI,SAAT;AACD;AACD,WAAOD,SAAP;AACD,GARD;;AAUAN,WAASF,SAASU,IAAT,EAAT,KAA6BP,QAAQE,MAAR,EAAgBL,SAASW,KAAT,EAAhB,CAA7B;AACD;;AAEDC,OAAOC,OAAP,GAAiBd,mBAAjB","file":"findRangesImmutable.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findRangesImmutable\n * \n */\n\n/**\n * Search through an array to find contiguous stretches of elements that\n * match a specified filter function.\n *\n * When ranges are found, execute a specified `found` function to supply\n * the values to the caller.\n */\n'use strict';\n\nfunction findRangesImmutable(haystack, areEqualFn, filterFn, foundFn) {\n  if (!haystack.size) {\n    return;\n  }\n\n  var cursor = 0;\n\n  haystack.reduce(function (value, nextValue, nextIndex) {\n    if (!areEqualFn(value, nextValue)) {\n      if (filterFn(value)) {\n        foundFn(cursor, nextIndex);\n      }\n      cursor = nextIndex;\n    }\n    return nextValue;\n  });\n\n  filterFn(haystack.last()) && foundFn(cursor, haystack.count());\n}\n\nmodule.exports = findRangesImmutable;"]}