{"version":3,"sources":["../../../src/components/draft/editOnBeforeInput.js"],"names":["BlockTree","require","DraftModifier","EditorState","UserAgent","getEntityKeyForSelection","isSelectionAtLeafStart","nullthrows","FF_QUICKFIND_CHAR","FF_QUICKFIND_LINK_CHAR","isFirefox","isBrowser","mustPreventDefaultForCharacter","character","replaceText","editorState","text","inlineStyle","entityKey","contentState","getCurrentContent","getSelection","push","editOnBeforeInput","e","chars","data","props","handleBeforeInput","preventDefault","selection","isCollapsed","update","getCurrentInlineStyle","mayAllowNative","newEditorState","anchorKey","getAnchorKey","anchorTree","getBlockTree","originalFingerprint","getFingerprint","newFingerprint","getDirectionMap","get","set","nativelyRenderedContent","module","exports"],"mappings":"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","file":"editOnBeforeInput.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * \n */\n\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\n'use strict';\n\nvar BlockTree = require('./BlockTree');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar FF_QUICKFIND_CHAR = '\\'';\nvar FF_QUICKFIND_LINK_CHAR = '\\/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\n\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\nfunction editOnBeforeInput(e) {\n  var chars = e.data;\n\n  // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n  if (!chars) {\n    return;\n  }\n\n  // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n  if (this.props.handleBeforeInput && this.props.handleBeforeInput(chars)) {\n    e.preventDefault();\n    return;\n  }\n\n  // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n  var editorState = this.props.editorState;\n  var selection = editorState.getSelection();\n\n  if (!selection.isCollapsed()) {\n    e.preventDefault();\n    this.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    return;\n  }\n\n  var mayAllowNative = !isSelectionAtLeafStart(editorState);\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\n\n  if (!mayAllowNative) {\n    e.preventDefault();\n    this.update(newEditorState);\n    return;\n  }\n\n  var anchorKey = selection.getAnchorKey();\n  var anchorTree = editorState.getBlockTree(anchorKey);\n\n  // Check the old and new \"fingerprints\" of the current block to determine\n  // whether this insertion requires any addition or removal of text nodes,\n  // in which case we would prevent the native character insertion.\n  var originalFingerprint = BlockTree.getFingerprint(anchorTree);\n  var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n\n  if (mustPreventDefaultForCharacter(chars) || originalFingerprint !== newFingerprint || nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey)) {\n    e.preventDefault();\n  } else {\n    // The native event is allowed to occur.\n    newEditorState = EditorState.set(newEditorState, {\n      nativelyRenderedContent: newEditorState.getCurrentContent()\n    });\n  }\n\n  this.update(newEditorState);\n}\n\nmodule.exports = editOnBeforeInput;"]}