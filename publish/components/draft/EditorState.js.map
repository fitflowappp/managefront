{"version":3,"sources":["../../../src/components/draft/EditorState.js"],"names":["_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","BlockTree","require","ContentState","EditorBidiService","Immutable","SelectionState","OrderedSet","Record","Stack","defaultRecord","allowUndo","currentContent","decorator","directionMap","forceSelection","inCompositionMode","inlineStyleOverride","lastChangeType","nativelyRenderedContent","redoStack","selection","treeMap","undoStack","EditorStateRecord","EditorState","value","toJS","getImmutable","getAllowUndo","get","getCurrentContent","getUndoStack","getRedoStack","getSelection","getDecorator","isInCompositionMode","mustForceSelection","getNativelyRenderedContent","getLastChangeType","getInlineStyleOverride","getCurrentInlineStyle","override","content","isCollapsed","getInlineStyleForCollapsedSelection","getInlineStyleForNonCollapsedSelection","getBlockTree","blockKey","getIn","isSelectionAtStartOfContent","firstKey","getBlockMap","first","getKey","hasEdgeWithin","isSelectionAtEndOfContent","blockMap","last","end","getLength","getDirectionMap","createEmpty","createWithContent","createFromText","contentState","create","config","recordConfig","generateNewTreeMap","set","editorState","put","map","withMutations","state","existingDecorator","newContent","newTreeMap","regenerateTreeForNewDecorator","merge","existingContent","regenerateTreeForNewBlocks","setInlineStyleOverride","acceptSelection","updateSelection","getHasFocus","moveSelectionToEnd","lastBlock","getLastBlock","lastKey","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","moveFocusToEnd","afterSelectionMove","push","changeType","getSelectionAfter","mustBecomeBoundary","getSelectionBefore","editorStateChanges","undo","newCurrentContent","peek","shift","redo","immutable","_immutable","block","generate","toOrderedMap","newBlockMap","prevBlockMap","prevTreeMap","toSeq","filter","previousTreeMap","getDecorations","startKey","getStartKey","startOffset","getStartOffset","startBlock","getBlockForKey","getInlineStyleAt","lookUpwardForInlineStyle","fromKey","previousBlock","getBlockBefore","previousLength","module","exports"],"mappings":"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","file":"EditorState.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EditorState\n * \n */\n\n'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar BlockTree = require('./BlockTree');\nvar ContentState = require('./ContentState');\nvar EditorBidiService = require('./EditorBidiService');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar OrderedSet = Immutable.OrderedSet;\nvar Record = Immutable.Record;\nvar Stack = Immutable.Stack;\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\n\nvar EditorStateRecord = Record(defaultRecord);\n\nvar EditorState = (function () {\n  _createClass(EditorState, [{\n    key: 'toJS',\n    value: function toJS() {\n      return this.getImmutable().toJS();\n    }\n  }, {\n    key: 'getAllowUndo',\n    value: function getAllowUndo() {\n      return this.getImmutable().get('allowUndo');\n    }\n  }, {\n    key: 'getCurrentContent',\n    value: function getCurrentContent() {\n      return this.getImmutable().get('currentContent');\n    }\n  }, {\n    key: 'getUndoStack',\n    value: function getUndoStack() {\n      return this.getImmutable().get('undoStack');\n    }\n  }, {\n    key: 'getRedoStack',\n    value: function getRedoStack() {\n      return this.getImmutable().get('redoStack');\n    }\n  }, {\n    key: 'getSelection',\n    value: function getSelection() {\n      return this.getImmutable().get('selection');\n    }\n  }, {\n    key: 'getDecorator',\n    value: function getDecorator() {\n      return this.getImmutable().get('decorator');\n    }\n  }, {\n    key: 'isInCompositionMode',\n    value: function isInCompositionMode() {\n      return this.getImmutable().get('inCompositionMode');\n    }\n  }, {\n    key: 'mustForceSelection',\n    value: function mustForceSelection() {\n      return this.getImmutable().get('forceSelection');\n    }\n  }, {\n    key: 'getNativelyRenderedContent',\n    value: function getNativelyRenderedContent() {\n      return this.getImmutable().get('nativelyRenderedContent');\n    }\n  }, {\n    key: 'getLastChangeType',\n    value: function getLastChangeType() {\n      return this.getImmutable().get('lastChangeType');\n    }\n\n    /**\n     * While editing, the user may apply inline style commands with a collapsed\n     * cursor, intending to type text that adopts the specified style. In this\n     * case, we track the specified style as an \"override\" that takes precedence\n     * over the inline style of the text adjacent to the cursor.\n     *\n     * If null, there is no override in place.\n     */\n  }, {\n    key: 'getInlineStyleOverride',\n    value: function getInlineStyleOverride() {\n      return this.getImmutable().get('inlineStyleOverride');\n    }\n  }, {\n    key: 'getCurrentInlineStyle',\n\n    /**\n     * Get the appropriate inline style for the editor state. If an\n     * override is in place, use it. Otherwise, the current style is\n     * based on the location of the selection state.\n     */\n    value: function getCurrentInlineStyle() {\n      var override = this.getInlineStyleOverride();\n      if (override != null) {\n        return override;\n      }\n\n      var content = this.getCurrentContent();\n      var selection = this.getSelection();\n\n      if (selection.isCollapsed()) {\n        return getInlineStyleForCollapsedSelection(content, selection);\n      }\n\n      return getInlineStyleForNonCollapsedSelection(content, selection);\n    }\n  }, {\n    key: 'getBlockTree',\n    value: function getBlockTree(blockKey) {\n      return this.getImmutable().getIn(['treeMap', blockKey]);\n    }\n  }, {\n    key: 'isSelectionAtStartOfContent',\n    value: function isSelectionAtStartOfContent() {\n      var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n      return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n    }\n  }, {\n    key: 'isSelectionAtEndOfContent',\n    value: function isSelectionAtEndOfContent() {\n      var content = this.getCurrentContent();\n      var blockMap = content.getBlockMap();\n      var last = blockMap.last();\n      var end = last.getLength();\n      return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n    }\n  }, {\n    key: 'getDirectionMap',\n    value: function getDirectionMap() {\n      return this.getImmutable().get('directionMap');\n    }\n\n    /**\n     * Incorporate native DOM selection changes into the EditorState. This\n     * method can be used when we simply want to accept whatever the DOM\n     * has given us to represent selection, and we do not need to re-render\n     * the editor.\n     *\n     * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n     */\n  }], [{\n    key: 'createEmpty',\n    value: function createEmpty(decorator) {\n      return EditorState.createWithContent(ContentState.createFromText(''), decorator);\n    }\n  }, {\n    key: 'createWithContent',\n    value: function createWithContent(contentState, decorator) {\n      var firstKey = contentState.getBlockMap().first().getKey();\n      return EditorState.create({\n        currentContent: contentState,\n        undoStack: Stack(),\n        redoStack: Stack(),\n        decorator: decorator || null,\n        selection: SelectionState.createEmpty(firstKey)\n      });\n    }\n  }, {\n    key: 'create',\n    value: function create(config) {\n      var currentContent = config.currentContent;\n      var decorator = config.decorator;\n\n      var recordConfig = _extends({}, config, {\n        treeMap: generateNewTreeMap(currentContent, decorator),\n        directionMap: EditorBidiService.getDirectionMap(currentContent)\n      });\n      return new EditorState(new EditorStateRecord(recordConfig));\n    }\n  }, {\n    key: 'set',\n    value: function set(editorState, put) {\n      var map = editorState.getImmutable().withMutations(function (state) {\n        var existingDecorator = state.get('decorator');\n        var decorator = existingDecorator;\n        if (put.decorator === null) {\n          decorator = null;\n        } else if (put.decorator) {\n          decorator = put.decorator;\n        }\n\n        var newContent = put.currentContent || editorState.getCurrentContent();\n\n        if (decorator !== existingDecorator) {\n          var treeMap = state.get('treeMap');\n          var newTreeMap;\n          if (decorator && existingDecorator) {\n            newTreeMap = regenerateTreeForNewDecorator(newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n          } else {\n            newTreeMap = generateNewTreeMap(newContent, decorator);\n          }\n\n          state.merge({\n            decorator: decorator,\n            treeMap: newTreeMap,\n            nativelyRenderedContent: null\n          });\n          return;\n        }\n\n        var existingContent = editorState.getCurrentContent();\n        if (newContent !== existingContent) {\n          state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), decorator));\n        }\n\n        state.merge(put);\n      });\n\n      return new EditorState(map);\n    }\n  }, {\n    key: 'setInlineStyleOverride',\n    value: function setInlineStyleOverride(editorState, inlineStyleOverride) {\n      return EditorState.set(editorState, { inlineStyleOverride: inlineStyleOverride });\n    }\n  }, {\n    key: 'acceptSelection',\n    value: function acceptSelection(editorState, selection) {\n      return updateSelection(editorState, selection, false);\n    }\n\n    /**\n     * At times, we need to force the DOM selection to be where we\n     * need it to be. This can occur when the anchor or focus nodes\n     * are non-text nodes, for instance. In this case, we want to trigger\n     * a re-render of the editor, which in turn forces selection into\n     * the correct place in the DOM. The `forceSelection` method\n     * accomplishes this.\n     *\n     * This method should be used in cases where you need to explicitly\n     * move the DOM selection from one place to another without a change\n     * in ContentState.\n     */\n  }, {\n    key: 'forceSelection',\n    value: function forceSelection(editorState, selection) {\n      if (!selection.getHasFocus()) {\n        selection = selection.set('hasFocus', true);\n      }\n      return updateSelection(editorState, selection, true);\n    }\n\n    /**\n     * Move selection to the end of the editor without forcing focus.\n     */\n  }, {\n    key: 'moveSelectionToEnd',\n    value: function moveSelectionToEnd(editorState) {\n      var content = editorState.getCurrentContent();\n      var lastBlock = content.getLastBlock();\n      var lastKey = lastBlock.getKey();\n      var length = lastBlock.getLength();\n\n      return EditorState.acceptSelection(editorState, new SelectionState({\n        anchorKey: lastKey,\n        anchorOffset: length,\n        focusKey: lastKey,\n        focusOffset: length,\n        isBackward: false\n      }));\n    }\n\n    /**\n     * Force focus to the end of the editor. This is useful in scenarios\n     * where we want to programmatically focus the input and it makes sense\n     * to allow the user to continue working seamlessly.\n     */\n  }, {\n    key: 'moveFocusToEnd',\n    value: function moveFocusToEnd(editorState) {\n      var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n      return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n    }\n\n    /**\n     * Push the current ContentState onto the undo stack if it should be\n     * considered a boundary state, and set the provided ContentState as the\n     * new current content.\n     */\n  }, {\n    key: 'push',\n    value: function push(editorState, contentState, changeType) {\n      if (editorState.getCurrentContent() === contentState) {\n        return editorState;\n      }\n\n      var forceSelection = changeType !== 'insert-characters';\n      var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n\n      if (!editorState.getAllowUndo()) {\n        return EditorState.set(editorState, {\n          currentContent: contentState,\n          directionMap: directionMap,\n          lastChangeType: changeType,\n          selection: contentState.getSelectionAfter(),\n          forceSelection: forceSelection,\n          inlineStyleOverride: null\n        });\n      }\n\n      var selection = editorState.getSelection();\n      var currentContent = editorState.getCurrentContent();\n      var undoStack = editorState.getUndoStack();\n      var newContent = contentState;\n\n      if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n        undoStack = undoStack.push(currentContent);\n        newContent = newContent.set('selectionBefore', selection);\n      } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n        // Preserve the previous selection.\n        newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n      }\n\n      var inlineStyleOverride = editorState.getInlineStyleOverride();\n\n      // Don't discard inline style overrides on block type or depth changes.\n      if (changeType !== 'adjust-depth' && changeType !== 'change-block-type') {\n        inlineStyleOverride = null;\n      }\n\n      var editorStateChanges = {\n        currentContent: newContent,\n        directionMap: directionMap,\n        undoStack: undoStack,\n        redoStack: Stack(),\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: inlineStyleOverride\n      };\n\n      return EditorState.set(editorState, editorStateChanges);\n    }\n\n    /**\n     * Make the top ContentState in the undo stack the new current content and\n     * push the current content onto the redo stack.\n     */\n  }, {\n    key: 'undo',\n    value: function undo(editorState) {\n      if (!editorState.getAllowUndo()) {\n        return editorState;\n      }\n\n      var undoStack = editorState.getUndoStack();\n      var newCurrentContent = undoStack.peek();\n      if (!newCurrentContent) {\n        return editorState;\n      }\n\n      var currentContent = editorState.getCurrentContent();\n      var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n\n      return EditorState.set(editorState, {\n        currentContent: newCurrentContent,\n        directionMap: directionMap,\n        undoStack: undoStack.shift(),\n        redoStack: editorState.getRedoStack().push(currentContent),\n        forceSelection: true,\n        inlineStyleOverride: null,\n        lastChangeType: 'undo',\n        nativelyRenderedContent: null,\n        selection: currentContent.getSelectionBefore()\n      });\n    }\n\n    /**\n     * Make the top ContentState in the redo stack the new current content and\n     * push the current content onto the undo stack.\n     */\n  }, {\n    key: 'redo',\n    value: function redo(editorState) {\n      if (!editorState.getAllowUndo()) {\n        return editorState;\n      }\n\n      var redoStack = editorState.getRedoStack();\n      var newCurrentContent = redoStack.peek();\n      if (!newCurrentContent) {\n        return editorState;\n      }\n\n      var currentContent = editorState.getCurrentContent();\n      var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n\n      return EditorState.set(editorState, {\n        currentContent: newCurrentContent,\n        directionMap: directionMap,\n        undoStack: editorState.getUndoStack().push(currentContent),\n        redoStack: redoStack.shift(),\n        forceSelection: true,\n        inlineStyleOverride: null,\n        lastChangeType: 'redo',\n        nativelyRenderedContent: null,\n        selection: newCurrentContent.getSelectionAfter()\n      });\n    }\n\n    /**\n     * Not for public consumption.\n     */\n  }]);\n\n  function EditorState(immutable) {\n    _classCallCheck(this, EditorState);\n\n    this._immutable = immutable;\n  }\n\n  /**\n   * Set the supplied SelectionState as the new current selection, and set\n   * the `force` flag to trigger manual selection placement by the view.\n   */\n\n  /**\n   * Not for public consumption.\n   */\n\n  _createClass(EditorState, [{\n    key: 'getImmutable',\n    value: function getImmutable() {\n      return this._immutable;\n    }\n  }]);\n\n  return EditorState;\n})();\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(block, decorator);\n  }).toOrderedMap();\n}\n\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, decorator) {\n  var prevBlockMap = editorState.getCurrentContent().getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(block, decorator);\n  }));\n}\n\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\nfunction regenerateTreeForNewDecorator(blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block) !== existingDecorator.getDecorations(block);\n  }).map(function (block) {\n    return BlockTree.generate(block, decorator);\n  }));\n}\n\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\n\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey);\n\n  // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  }\n\n  // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  }\n\n  // Otherwise, look upward in the document to find the closest character.\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey);\n\n  // If there is a character just inside the selection, use its style.\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  }\n\n  // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  }\n\n  // Otherwise, look upward in the document to find the closest character.\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var previousBlock = content.getBlockBefore(fromKey);\n  var previousLength;\n\n  while (previousBlock) {\n    previousLength = previousBlock.getLength();\n    if (previousLength) {\n      return previousBlock.getInlineStyleAt(previousLength - 1);\n    }\n    previousBlock = content.getBlockBefore(previousBlock.getKey());\n  }\n\n  return OrderedSet();\n}\n\nmodule.exports = EditorState;"]}