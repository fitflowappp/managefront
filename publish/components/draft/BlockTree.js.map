{"version":3,"sources":["../../../src/components/draft/BlockTree.js"],"names":["Immutable","require","emptyFunction","findRangesImmutable","List","Repeat","Record","returnTrue","thatReturnsTrue","FINGERPRINT_DELIMITER","defaultLeafRange","start","end","LeafRange","defaultDecoratorRange","decoratorKey","leaves","DecoratorRange","BlockTree","generate","block","decorator","textLength","getLength","of","leafSets","decorations","getDecorations","chars","getCharacterList","areEqual","push","get","generateLeaves","slice","toList","getFingerprint","tree","map","leafSet","fingerprintString","size","join","characters","offset","inlineStyles","c","getStyle","a","b","module","exports"],"mappings":"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","file":"BlockTree.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar List = Immutable.List;\nvar Repeat = Immutable.Repeat;\nvar Record = Immutable.Record;\n\nvar returnTrue = emptyFunction.thatReturnsTrue;\n\nvar FINGERPRINT_DELIMITER = '-';\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\n\nvar LeafRange = Record(defaultLeafRange);\n\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\n\nvar DecoratorRange = Record(defaultDecoratorRange);\n\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(block, decorator) {\n    var textLength = block.getLength();\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({ start: 0, end: 0 }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block) : List(Repeat(null, textLength));\n\n    var chars = block.getCharacterList();\n\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n\n    return List(leafSets);\n  },\n\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n\n/**\n * Generate LeafRange records for a given character list.\n */\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;"]}