{"version":3,"sources":["../../../src/components/draft/editOnCut.js"],"names":["DraftModifier","require","EditorState","Style","getFragmentFromSelection","getScrollPosition","editOnCut","e","_this","editorState","props","selection","getSelection","isCollapsed","preventDefault","scrollParent","getScrollParent","target","_getScrollPosition","x","y","fragment","setClipboard","setRenderGuard","setMode","setTimeout","restoreEditorDOM","removeRenderGuard","exitCurrentMode","update","removeFragment","newContent","removeRange","getCurrentContent","push","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,gBAAgBC,QAAQ,iBAAR,CAApB;AACA,IAAIC,cAAcD,QAAQ,eAAR,CAAlB;AACA,IAAIE,QAAQF,QAAQ,gBAAR,CAAZ;;AAEA,IAAIG,2BAA2BH,QAAQ,4BAAR,CAA/B;AACA,IAAII,oBAAoBJ,QAAQ,4BAAR,CAAxB;;AAEA;;;;;;;;;AASA,SAASK,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,MAAIC,QAAQ,IAAZ;;AAEA,MAAIC,cAAc,KAAKC,KAAL,CAAWD,WAA7B;AACA,MAAIE,YAAYF,YAAYG,YAAZ,EAAhB;;AAEA;AACA,MAAID,UAAUE,WAAV,EAAJ,EAA6B;AAC3BN,MAAEO,cAAF;AACA;AACD;;AAED;AACA;AACA,MAAIC,eAAeZ,MAAMa,eAAN,CAAsBT,EAAEU,MAAxB,CAAnB;;AAEA,MAAIC,qBAAqBb,kBAAkBU,YAAlB,CAAzB;;AAEA,MAAII,IAAID,mBAAmBC,CAA3B;AACA,MAAIC,IAAIF,mBAAmBE,CAA3B;;AAEA,MAAIC,WAAWjB,yBAAyBK,WAAzB,CAAf;AACA,OAAKa,YAAL,CAAkBD,QAAlB;;AAEA;AACA,OAAKE,cAAL;AACA,OAAKC,OAAL,CAAa,KAAb;;AAEA;AACAC,aAAW,YAAY;AACrBjB,UAAMkB,gBAAN,CAAuB,EAAEP,GAAGA,CAAL,EAAQC,GAAGA,CAAX,EAAvB;AACAZ,UAAMmB,iBAAN;AACAnB,UAAMoB,eAAN;AACApB,UAAMqB,MAAN,CAAaC,eAAerB,WAAf,CAAb;AACD,GALD,EAKG,CALH;AAMD;;AAED,SAASqB,cAAT,CAAwBrB,WAAxB,EAAqC;AACnC,MAAIsB,aAAa/B,cAAcgC,WAAd,CAA0BvB,YAAYwB,iBAAZ,EAA1B,EAA2DxB,YAAYG,YAAZ,EAA3D,EAAuF,SAAvF,CAAjB;AACA,SAAOV,YAAYgC,IAAZ,CAAiBzB,WAAjB,EAA8BsB,UAA9B,EAA0C,cAA1C,CAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiB9B,SAAjB","file":"editOnCut.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCut\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Style = require('fbjs/lib/Style');\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\nvar getScrollPosition = require('fbjs/lib/getScrollPosition');\n\n/**\n * On `cut` events, native behavior is allowed to occur so that the system\n * clipboard is set properly. This means that we need to take steps to recover\n * the editor DOM state after the `cut` has occurred in order to maintain\n * control of the component.\n *\n * In addition, we can keep a copy of the removed fragment, including all\n * styles and entities, for use as an internal paste.\n */\nfunction editOnCut(e) {\n  var _this = this;\n\n  var editorState = this.props.editorState;\n  var selection = editorState.getSelection();\n\n  // No selection, so there's nothing to cut.\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n\n  // Track the current scroll position so that it can be forced back in place\n  // after the editor regains control of the DOM.\n  var scrollParent = Style.getScrollParent(e.target);\n\n  var _getScrollPosition = getScrollPosition(scrollParent);\n\n  var x = _getScrollPosition.x;\n  var y = _getScrollPosition.y;\n\n  var fragment = getFragmentFromSelection(editorState);\n  this.setClipboard(fragment);\n\n  // Set `cut` mode to disable all event handling temporarily.\n  this.setRenderGuard();\n  this.setMode('cut');\n\n  // Let native `cut` behavior occur, then recover control.\n  setTimeout(function () {\n    _this.restoreEditorDOM({ x: x, y: y });\n    _this.removeRenderGuard();\n    _this.exitCurrentMode();\n    _this.update(removeFragment(editorState));\n  }, 0);\n}\n\nfunction removeFragment(editorState) {\n  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');\n  return EditorState.push(editorState, newContent, 'remove-range');\n}\n\nmodule.exports = editOnCut;"]}