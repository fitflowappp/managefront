{"version":3,"sources":["../../../src/components/draft/DraftEntity.js"],"names":["_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","DraftEntityInstance","require","Immutable","invariant","Map","instances","instanceKey","DraftEntity","create","type","mutability","data","add","instance","set","get","process","env","NODE_ENV","undefined","mergeData","toMerge","newData","getData","newInstance","replaceData","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;;;;;;;AAEA,IAAIA,WAAW,oBAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,UAAUC,MAA9B,EAAsCF,GAAtC,EAA2C;AAAE,QAAIG,SAASF,UAAUD,CAAV,CAAb,CAA2B,KAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIE,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,eAAOK,GAAP,IAAcD,OAAOC,GAAP,CAAd;AAA4B;AAAE;AAAE,GAAC,OAAOL,MAAP;AAAgB,CAAhQ;;AAEA,IAAIU,sBAAsBC,QAAQ,uBAAR,CAA1B;AACA,IAAIC,YAAYD,QAAQ,WAAR,CAAhB;;AAEA,IAAIE,YAAYF,QAAQ,oBAAR,CAAhB;;AAEA,IAAIG,MAAMF,UAAUE,GAApB;;AAEA,IAAIC,YAAYD,KAAhB;AACA,IAAIE,cAAc,CAAlB;;AAEA;;;;;;;;;;;;;AAaA,IAAIC,cAAc;AAChB;;;;;;;AAOAC,UAAQ,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,UAAtB,EAAkCC,IAAlC,EAAwC;AAC9C,WAAOJ,YAAYK,GAAZ,CAAgB,IAAIZ,mBAAJ,CAAwB,EAAES,MAAMA,IAAR,EAAcC,YAAYA,UAA1B,EAAsCC,MAAMA,QAAQ,EAApD,EAAxB,CAAhB,CAAP;AACD,GAVe;;AAYhB;;;;AAIAC,OAAK,SAASA,GAAT,CAAaC,QAAb,EAAuB;AAC1B,QAAIlB,MAAM,KAAK,EAAEW,WAAjB;AACAD,gBAAYA,UAAUS,GAAV,CAAcnB,GAAd,EAAmBkB,QAAnB,CAAZ;AACA,WAAOlB,GAAP;AACD,GApBe;;AAsBhB;;;AAGAoB,OAAK,SAASA,GAAT,CAAapB,GAAb,EAAkB;AACrB,QAAIkB,WAAWR,UAAUU,GAAV,CAAcpB,GAAd,CAAf;AACA,KAAC,CAAC,CAACkB,QAAH,GAAcG,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCf,UAAU,KAAV,EAAiB,0BAAjB,CAAxC,GAAuFA,UAAU,KAAV,CAArG,GAAwHgB,SAAxH;AACA,WAAON,QAAP;AACD,GA7Be;;AA+BhB;;;;;AAKAO,aAAW,SAASA,SAAT,CAAmBzB,GAAnB,EAAwB0B,OAAxB,EAAiC;AAC1C,QAAIR,WAAWN,YAAYQ,GAAZ,CAAgBpB,GAAhB,CAAf;AACA,QAAI2B,UAAUjC,SAAS,EAAT,EAAawB,SAASU,OAAT,EAAb,EAAiCF,OAAjC,CAAd;AACA,QAAIG,cAAcX,SAASC,GAAT,CAAa,MAAb,EAAqBQ,OAArB,CAAlB;AACAjB,gBAAYA,UAAUS,GAAV,CAAcnB,GAAd,EAAmB6B,WAAnB,CAAZ;AACA,WAAOA,WAAP;AACD,GA1Ce;;AA4ChB;;;AAGAC,eAAa,SAASA,WAAT,CAAqB9B,GAArB,EAA0B2B,OAA1B,EAAmC;AAC9C,QAAIT,WAAWN,YAAYQ,GAAZ,CAAgBpB,GAAhB,CAAf;AACA,QAAI6B,cAAcX,SAASC,GAAT,CAAa,MAAb,EAAqBQ,OAArB,CAAlB;AACAjB,gBAAYA,UAAUS,GAAV,CAAcnB,GAAd,EAAmB6B,WAAnB,CAAZ;AACA,WAAOA,WAAP;AACD;AApDe,CAAlB;;AAuDAE,OAAOC,OAAP,GAAiBpB,WAAjB","file":"DraftEntity.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEntity\n * @typechecks\n * \n */\n\n'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar DraftEntityInstance = require('./DraftEntityInstance');\nvar Immutable = require('immutable');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Map = Immutable.Map;\n\nvar instances = Map();\nvar instanceKey = 0;\n\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\nvar DraftEntity = {\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    return DraftEntity.add(new DraftEntityInstance({ type: type, mutability: mutability, data: data || {} }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    var key = '' + ++instanceKey;\n    instances = instances.set(key, instance);\n    return key;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key.') : invariant(false) : undefined;\n    return instance;\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    var instance = DraftEntity.get(key);\n    var newData = _extends({}, instance.getData(), toMerge);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    var instance = DraftEntity.get(key);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\n\nmodule.exports = DraftEntity;"]}