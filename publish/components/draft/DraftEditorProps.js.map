{"version":3,"sources":["../../../src/components/draft/DraftEditorProps.js"],"names":["Object","defineProperty","exports","value"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;;AAIA;;;;;;;;;;;AAWA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA","file":"DraftEditorProps.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEditorProps\n * \n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\n/**\n * The two most critical props are `editorState` and `onChange`.\n *\n * The `editorState` prop defines the entire state of the editor, while the\n * `onChange` prop is the method in which all state changes are propagated\n * upward to higher-level components.\n *\n * These props are analagous to `value` and `onChange` in controlled React\n * text inputs.\n */\n\n// Specify whether text alignment should be forced in a direction\n// regardless of input characters.\n\n// For a given `ContentBlock` object, return an object that specifies\n// a custom block component and/or props. If no object is returned,\n// the default `TextEditorBlock` is used.\n\n// Function that returns a cx map corresponding to block-level styles.\n\n// A function that accepts a synthetic key event and returns\n// the matching DraftEditorCommand constant, or null if no command should\n// be invoked.\n\n// Set whether the `DraftEditor` component should be editable. Useful for\n// temporarily disabling edit behavior or allowing `DraftEditor` rendering\n// to be used for consumption purposes.\n\n// Note: spellcheck is always disabled for IE. If enabled in Safari, OSX\n// autocorrect is enabled as well.\n\n// Set whether to remove all style information from pasted content. If your\n// use case should not have any block or inline styles, it is recommended\n// that you set this to `true`.\n\n/**\n * Cancelable event handlers, handled from the top level down. A handler\n * that returns true will be the last handler to execute for that event.\n */\n\n// Useful for managing special behavior for pressing the `Return` key. E.g.\n// removing the style from an empty list item.\n\n// Map a key command string provided by your key binding function to a\n// specified behavior.\n\n// Handle intended text insertion before the insertion occurs. This may be\n// useful in cases where the user has entered characters that you would like\n// to trigger some special behavior. E.g. immediately converting `:)` to an\n// emoji Unicode character, or replacing ASCII quote characters with smart\n// quotes.\n\n// Handle dropped files\n\n// Handle other drops to prevent default text movement/insertion behaviour\n\n/**\n * Non-cancelable event triggers.\n */\n\n// Provide a map of inline style names corresponding to CSS style objects\n// that will be rendered for matching ranges.\n\n// Provide a map of block rendering configurations. Each block type maps to\n// an element tag and am optional react element wrapper. This configuration\n// is used for both rendering and paste processing."]}