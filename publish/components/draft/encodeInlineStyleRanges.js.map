{"version":3,"sources":["../../../src/components/draft/encodeInlineStyleRanges.js"],"names":["UnicodeUtils","require","findRangesImmutable","areEqual","a","b","isTruthy","EMPTY_ARRAY","getEncodedInlinesForType","block","styleList","styleToEncode","ranges","filteredInlines","map","style","has","toList","start","end","text","getText","push","offset","strlen","slice","length","encodeInlineStyleRanges","getCharacterList","c","getStyle","flatten","toSet","Array","prototype","concat","apply","toJS","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,eAAeC,QAAQ,uBAAR,CAAnB;;AAEA,IAAIC,sBAAsBD,QAAQ,uBAAR,CAA1B;;AAEA,IAAIE,WAAW,SAASA,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;AACrC,SAAOD,MAAMC,CAAb;AACD,CAFD;AAGA,IAAIC,WAAW,SAASA,QAAT,CAAkBF,CAAlB,EAAqB;AAClC,SAAO,CAAC,CAACA,CAAT;AACD,CAFD;AAGA,IAAIG,cAAc,EAAlB;;AAEA;;;;AAIA,SAASC,wBAAT,CAAkCC,KAAlC,EAAyCC,SAAzC,EAAoDC,aAApD,EAAmE;AACjE,MAAIC,SAAS,EAAb;;AAEA;AACA,MAAIC,kBAAkBH,UAAUI,GAAV,CAAc,UAAUC,KAAV,EAAiB;AACnD,WAAOA,MAAMC,GAAN,CAAUL,aAAV,CAAP;AACD,GAFqB,EAEnBM,MAFmB,EAAtB;;AAIAf,sBAAoBW,eAApB,EAAqCV,QAArC;AACA;AACAG,UAFA,EAEU,UAAUY,KAAV,EAAiBC,GAAjB,EAAsB;AAC9B,QAAIC,OAAOX,MAAMY,OAAN,EAAX;AACAT,WAAOU,IAAP,CAAY;AACVC,cAAQvB,aAAawB,MAAb,CAAoBJ,KAAKK,KAAL,CAAW,CAAX,EAAcP,KAAd,CAApB,CADE;AAEVQ,cAAQ1B,aAAawB,MAAb,CAAoBJ,KAAKK,KAAL,CAAWP,KAAX,EAAkBC,GAAlB,CAApB,CAFE;AAGVJ,aAAOJ;AAHG,KAAZ;AAKD,GATD;;AAWA,SAAOC,MAAP;AACD;;AAED;;;;AAIA,SAASe,uBAAT,CAAiClB,KAAjC,EAAwC;AACtC,MAAIC,YAAYD,MAAMmB,gBAAN,GAAyBd,GAAzB,CAA6B,UAAUe,CAAV,EAAa;AACxD,WAAOA,EAAEC,QAAF,EAAP;AACD,GAFe,EAEbb,MAFa,EAAhB;AAGA,MAAIL,SAASF,UAAUqB,OAAV,GAAoBC,KAApB,GAA4BlB,GAA5B,CAAgC,UAAUC,KAAV,EAAiB;AAC5D,WAAOP,yBAAyBC,KAAzB,EAAgCC,SAAhC,EAA2CK,KAA3C,CAAP;AACD,GAFY,CAAb;;AAIA,SAAOkB,MAAMC,SAAN,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6B7B,WAA7B,EAA0CK,OAAOyB,IAAP,EAA1C,CAAP;AACD;;AAEDC,OAAOC,OAAP,GAAiBZ,uBAAjB","file":"encodeInlineStyleRanges.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule encodeInlineStyleRanges\n * \n */\n\n'use strict';\n\nvar UnicodeUtils = require('fbjs/lib/UnicodeUtils');\n\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar areEqual = function areEqual(a, b) {\n  return a === b;\n};\nvar isTruthy = function isTruthy(a) {\n  return !!a;\n};\nvar EMPTY_ARRAY = [];\n\n/**\n * Helper function for getting encoded styles for each inline style. Convert\n * to UTF-8 character counts for storage.\n */\nfunction getEncodedInlinesForType(block, styleList, styleToEncode) {\n  var ranges = [];\n\n  // Obtain an array with ranges for only the specified style.\n  var filteredInlines = styleList.map(function (style) {\n    return style.has(styleToEncode);\n  }).toList();\n\n  findRangesImmutable(filteredInlines, areEqual,\n  // We only want to keep ranges with nonzero style values.\n  isTruthy, function (start, end) {\n    var text = block.getText();\n    ranges.push({\n      offset: UnicodeUtils.strlen(text.slice(0, start)),\n      length: UnicodeUtils.strlen(text.slice(start, end)),\n      style: styleToEncode\n    });\n  });\n\n  return ranges;\n}\n\n/*\n * Retrieve the encoded arrays of inline styles, with each individual style\n * treated separately.\n */\nfunction encodeInlineStyleRanges(block) {\n  var styleList = block.getCharacterList().map(function (c) {\n    return c.getStyle();\n  }).toList();\n  var ranges = styleList.flatten().toSet().map(function (style) {\n    return getEncodedInlinesForType(block, styleList, style);\n  });\n\n  return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());\n}\n\nmodule.exports = encodeInlineStyleRanges;"]}