{"version":3,"sources":["../../../src/components/draft/editOnCopy.js"],"names":["getFragmentFromSelection","require","editOnCopy","e","editorState","props","selection","getSelection","isCollapsed","preventDefault","setClipboard","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,2BAA2BC,QAAQ,4BAAR,CAA/B;;AAEA;;;;;AAKA,SAASC,UAAT,CAAoBC,CAApB,EAAuB;AACrB,MAAIC,cAAc,KAAKC,KAAL,CAAWD,WAA7B;AACA,MAAIE,YAAYF,YAAYG,YAAZ,EAAhB;;AAEA;AACA,MAAID,UAAUE,WAAV,EAAJ,EAA6B;AAC3BL,MAAEM,cAAF;AACA;AACD;;AAED,OAAKC,YAAL,CAAkBV,yBAAyB,KAAKK,KAAL,CAAWD,WAApC,CAAlB;AACD;;AAEDO,OAAOC,OAAP,GAAiBV,UAAjB","file":"editOnCopy.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnCopy\n * \n */\n\n'use strict';\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\n\n/**\n * If we have a selection, create a ContentState fragment and store\n * it in our internal clipboard. Subsequent paste events will use this\n * fragment if no external clipboard data is supplied.\n */\nfunction editOnCopy(e) {\n  var editorState = this.props.editorState;\n  var selection = editorState.getSelection();\n\n  // No selection, so there's nothing to copy.\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n\n  this.setClipboard(getFragmentFromSelection(this.props.editorState));\n}\n\nmodule.exports = editOnCopy;"]}