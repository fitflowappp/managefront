{"version":3,"sources":["../../../src/components/draft/insertFragmentIntoContentState.js"],"names":["BlockMapBuilder","require","generateRandomKey","insertIntoList","invariant","insertFragmentIntoContentState","contentState","selectionState","fragment","isCollapsed","process","env","NODE_ENV","undefined","targetKey","getStartKey","targetOffset","getStartOffset","blockMap","getBlockMap","fragmentSize","size","finalKey","finalOffset","targetBlock","get","pastedBlock","first","text","getText","chars","getCharacterList","newBlock","merge","slice","characterList","set","length","selectionBefore","selectionAfter","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","newBlockArr","forEach","block","blockKey","push","blockSize","headText","headCharacters","appendToHead","modifiedHead","concat","fragmentBlock","tailText","tailCharacters","prependToTail","last","modifiedTail","key","getLength","createFromArray","module","exports"],"mappings":"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","file":"insertFragmentIntoContentState.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertFragmentIntoContentState\n * @typechecks\n * \n */\n\n'use strict';\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar insertIntoList = require('./insertIntoList');\nvar invariant = require('fbjs/lib/invariant');\n\nfunction insertFragmentIntoContentState(contentState, selectionState, fragment) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertFragment` should only be called with a collapsed selection state.') : invariant(false) : undefined;\n\n  var targetKey = selectionState.getStartKey();\n  var targetOffset = selectionState.getStartOffset();\n\n  var blockMap = contentState.getBlockMap();\n\n  var fragmentSize = fragment.size;\n  var finalKey;\n  var finalOffset;\n\n  if (fragmentSize === 1) {\n    var targetBlock = blockMap.get(targetKey);\n    var pastedBlock = fragment.first();\n    var text = targetBlock.getText();\n    var chars = targetBlock.getCharacterList();\n\n    var newBlock = targetBlock.merge({\n      text: text.slice(0, targetOffset) + pastedBlock.getText() + text.slice(targetOffset),\n      characterList: insertIntoList(chars, pastedBlock.getCharacterList(), targetOffset)\n    });\n\n    blockMap = blockMap.set(targetKey, newBlock);\n\n    finalKey = targetKey;\n    finalOffset = targetOffset + pastedBlock.getText().length;\n\n    return contentState.merge({\n      blockMap: blockMap.set(targetKey, newBlock),\n      selectionBefore: selectionState,\n      selectionAfter: selectionState.merge({\n        anchorKey: finalKey,\n        anchorOffset: finalOffset,\n        focusKey: finalKey,\n        focusOffset: finalOffset,\n        isBackward: false\n      })\n    });\n  }\n\n  var newBlockArr = [];\n\n  contentState.getBlockMap().forEach(function (block, blockKey) {\n    if (blockKey !== targetKey) {\n      newBlockArr.push(block);\n      return;\n    }\n\n    var text = block.getText();\n    var chars = block.getCharacterList();\n\n    // Modify head portion of block.\n    var blockSize = text.length;\n    var headText = text.slice(0, targetOffset);\n    var headCharacters = chars.slice(0, targetOffset);\n    var appendToHead = fragment.first();\n\n    var modifiedHead = block.merge({\n      text: headText + appendToHead.getText(),\n      characterList: headCharacters.concat(appendToHead.getCharacterList())\n    });\n\n    newBlockArr.push(modifiedHead);\n\n    // Insert fragment blocks after the head and before the tail.\n    fragment.slice(1, fragmentSize - 1).forEach(function (fragmentBlock) {\n      newBlockArr.push(fragmentBlock.set('key', generateRandomKey()));\n    });\n\n    // Modify tail portion of block.\n    var tailText = text.slice(targetOffset, blockSize);\n    var tailCharacters = chars.slice(targetOffset, blockSize);\n    var prependToTail = fragment.last();\n    finalKey = generateRandomKey();\n\n    var modifiedTail = prependToTail.merge({\n      key: finalKey,\n      text: prependToTail.getText() + tailText,\n      characterList: prependToTail.getCharacterList().concat(tailCharacters)\n    });\n\n    newBlockArr.push(modifiedTail);\n  });\n\n  finalOffset = fragment.last().getLength();\n\n  return contentState.merge({\n    blockMap: BlockMapBuilder.createFromArray(newBlockArr),\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: finalKey,\n      anchorOffset: finalOffset,\n      focusKey: finalKey,\n      focusOffset: finalOffset,\n      isBackward: false\n    })\n  });\n}\n\nmodule.exports = insertFragmentIntoContentState;"]}