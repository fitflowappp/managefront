{"version":3,"sources":["../../../src/components/draft/DraftRemovableWord.js"],"names":["TokenizeUtil","require","punctuation","getPunctuation","CHAMELEON_CHARS","WHITESPACE_AND_PUNCTUATION","DELETE_STRING","DELETE_REGEX","RegExp","BACKSPACE_STRING","BACKSPACE_REGEX","getRemovableWord","text","isBackward","matches","exec","DraftRemovableWord","getBackward","getForward","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;AAEA,IAAIA,eAAeC,QAAQ,uBAAR,CAAnB;;AAEA,IAAIC,cAAcF,aAAaG,cAAb,EAAlB;;AAEA;AACA;AACA;AACA;AACA,IAAIC,kBAAkB,QAAtB;;AAEA;AACA;AACA,IAAIC,6BAA6B,gBAAgBH,WAAjD;;AAEA,IAAII,gBAAgB,MAAM,KAAN,GAAcD,0BAAd,GAA2C,IAA3C,GAAkD,KAAlD,GAA0DD,eAA1D,GAA4E,MAA5E,GAAqFC,0BAArF,GAAkH,MAAlH,GAA2H,QAA3H,GAAsIA,0BAAtI,GAAmK,KAAvL;AACA,IAAIE,eAAe,IAAIC,MAAJ,CAAWF,aAAX,CAAnB;;AAEA,IAAIG,mBAAmB,WAAWJ,0BAAX,GAAwC,KAAxC,GAAgD,KAAhD,GAAwDD,eAAxD,GAA0E,MAA1E,GAAmFC,0BAAnF,GAAgH,MAAhH,GAAyH,KAAzH,GAAiIA,0BAAjI,GAA8J,IAA9J,GAAqK,GAA5L;AACA,IAAIK,kBAAkB,IAAIF,MAAJ,CAAWC,gBAAX,CAAtB;;AAEA,SAASE,gBAAT,CAA0BC,IAA1B,EAAgCC,UAAhC,EAA4C;AAC1C,MAAIC,UAAUD,aAAaH,gBAAgBK,IAAhB,CAAqBH,IAArB,CAAb,GAA0CL,aAAaQ,IAAb,CAAkBH,IAAlB,CAAxD;AACA,SAAOE,UAAUA,QAAQ,CAAR,CAAV,GAAuBF,IAA9B;AACD;;AAED,IAAII,qBAAqB;AACvBC,eAAa,SAASA,WAAT,CAAqBL,IAArB,EAA2B;AACtC,WAAOD,iBAAiBC,IAAjB,EAAuB,IAAvB,CAAP;AACD,GAHsB;;AAKvBM,cAAY,SAASA,UAAT,CAAoBN,IAApB,EAA0B;AACpC,WAAOD,iBAAiBC,IAAjB,EAAuB,KAAvB,CAAP;AACD;AAPsB,CAAzB;;AAUAO,OAAOC,OAAP,GAAiBJ,kBAAjB","file":"DraftRemovableWord.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftRemovableWord\n * @typechecks\n * \n */\n\n'use strict';\n\nvar TokenizeUtil = require('fbjs/lib/TokenizeUtil');\n\nvar punctuation = TokenizeUtil.getPunctuation();\n\n// The apostrophe and curly single quotes behave in a curious way: when\n// surrounded on both sides by word characters, they behave as word chars; when\n// either neighbor is punctuation or an end of the string, they behave as\n// punctuation.\nvar CHAMELEON_CHARS = '[\\'‘’]';\n\n// Remove the underscore, which should count as part of the removable word. The\n// \"chameleon chars\" also count as punctuation in this regex.\nvar WHITESPACE_AND_PUNCTUATION = '\\\\s|(?![_])' + punctuation;\n\nvar DELETE_STRING = '^' + '(?:' + WHITESPACE_AND_PUNCTUATION + ')*' + '(?:' + CHAMELEON_CHARS + '|(?!' + WHITESPACE_AND_PUNCTUATION + ').)*' + '(?:(?!' + WHITESPACE_AND_PUNCTUATION + ').)';\nvar DELETE_REGEX = new RegExp(DELETE_STRING);\n\nvar BACKSPACE_STRING = '(?:(?!' + WHITESPACE_AND_PUNCTUATION + ').)' + '(?:' + CHAMELEON_CHARS + '|(?!' + WHITESPACE_AND_PUNCTUATION + ').)*' + '(?:' + WHITESPACE_AND_PUNCTUATION + ')*' + '$';\nvar BACKSPACE_REGEX = new RegExp(BACKSPACE_STRING);\n\nfunction getRemovableWord(text, isBackward) {\n  var matches = isBackward ? BACKSPACE_REGEX.exec(text) : DELETE_REGEX.exec(text);\n  return matches ? matches[0] : text;\n}\n\nvar DraftRemovableWord = {\n  getBackward: function getBackward(text) {\n    return getRemovableWord(text, true);\n  },\n\n  getForward: function getForward(text) {\n    return getRemovableWord(text, false);\n  }\n};\n\nmodule.exports = DraftRemovableWord;"]}