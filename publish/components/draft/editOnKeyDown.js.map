{"version":3,"sources":["../../../src/components/draft/editOnKeyDown.js"],"names":["DraftModifier","require","EditorState","KeyBindingUtil","Keys","SecondaryClipboard","UserAgent","keyCommandBackspaceToStartOfLine","keyCommandBackspaceWord","keyCommandDeleteWord","keyCommandInsertNewline","keyCommandPlainBackspace","keyCommandPlainDelete","keyCommandMoveSelectionToEndOfBlock","keyCommandMoveSelectionToStartOfBlock","keyCommandTransposeCharacters","keyCommandUndo","isOptionKeyCommand","isChrome","isBrowser","onKeyCommand","command","editorState","redo","cut","paste","editOnKeyDown","e","keyCode","which","props","RETURN","preventDefault","handleReturn","ESC","onEscape","TAB","onTab","UP","onUpArrow","DOWN","onDownArrow","SPACE","contentState","replaceText","getCurrentContent","getSelection","update","push","keyBindingFn","handleKeyCommand","newState","module","exports"],"mappings":"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","file":"editOnKeyDown.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnKeyDown\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar KeyBindingUtil = require('./KeyBindingUtil');\nvar Keys = require('fbjs/lib/Keys');\nvar SecondaryClipboard = require('./SecondaryClipboard');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar keyCommandBackspaceToStartOfLine = require('./keyCommandBackspaceToStartOfLine');\nvar keyCommandBackspaceWord = require('./keyCommandBackspaceWord');\nvar keyCommandDeleteWord = require('./keyCommandDeleteWord');\nvar keyCommandInsertNewline = require('./keyCommandInsertNewline');\nvar keyCommandPlainBackspace = require('./keyCommandPlainBackspace');\nvar keyCommandPlainDelete = require('./keyCommandPlainDelete');\nvar keyCommandMoveSelectionToEndOfBlock = require('./keyCommandMoveSelectionToEndOfBlock');\nvar keyCommandMoveSelectionToStartOfBlock = require('./keyCommandMoveSelectionToStartOfBlock');\nvar keyCommandTransposeCharacters = require('./keyCommandTransposeCharacters');\nvar keyCommandUndo = require('./keyCommandUndo');\n\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\n\nvar isChrome = UserAgent.isBrowser('Chrome');\n\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\nfunction onKeyCommand(command, editorState) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState);\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n    default:\n      return editorState;\n  }\n}\n\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\nfunction editOnKeyDown(e) {\n  var keyCode = e.which;\n  var editorState = this.props.editorState;\n\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault();\n      // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n      if (this.props.handleReturn && this.props.handleReturn(e)) {\n        return;\n      }\n      break;\n    case Keys.ESC:\n      e.preventDefault();\n      this.props.onEscape && this.props.onEscape(e);\n      return;\n    case Keys.TAB:\n      this.props.onTab && this.props.onTab(e);\n      return;\n    case Keys.UP:\n      this.props.onUpArrow && this.props.onUpArrow(e);\n      return;\n    case Keys.DOWN:\n      this.props.onDownArrow && this.props.onDownArrow(e);\n      return;\n    case Keys.SPACE:\n      // Handling for OSX where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n        // Insert a nbsp into the editor.\n        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), 'Â ');\n        this.update(EditorState.push(editorState, contentState, 'insert-characters'));\n        return;\n      }\n  }\n\n  var command = this.props.keyBindingFn(e);\n\n  // If no command is specified, allow keydown event to continue.\n  if (!command) {\n    return;\n  }\n\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, this.update);\n    return;\n  }\n\n  // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n  e.preventDefault();\n\n  // Allow components higher up the tree to handle the command first.\n  if (this.props.handleKeyCommand && this.props.handleKeyCommand(command)) {\n    return;\n  }\n\n  var newState = onKeyCommand(command, editorState);\n  if (newState !== editorState) {\n    this.update(newState);\n  }\n}\n\nmodule.exports = editOnKeyDown;"]}