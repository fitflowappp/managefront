{"version":3,"sources":["../../../src/components/draft/insertTextIntoContentState.js"],"names":["Immutable","require","insertIntoList","invariant","Repeat","insertTextIntoContentState","contentState","selectionState","text","characterMetadata","isCollapsed","process","env","NODE_ENV","undefined","len","length","blockMap","getBlockMap","key","getStartKey","offset","getStartOffset","block","get","blockText","getText","newBlock","merge","slice","getLength","characterList","getCharacterList","toList","newOffset","set","selectionAfter","anchorOffset","focusOffset","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;AAEA,IAAIA,YAAYC,QAAQ,WAAR,CAAhB;;AAEA,IAAIC,iBAAiBD,QAAQ,kBAAR,CAArB;AACA,IAAIE,YAAYF,QAAQ,oBAAR,CAAhB;;AAEA,IAAIG,SAASJ,UAAUI,MAAvB;;AAEA,SAASC,0BAAT,CAAoCC,YAApC,EAAkDC,cAAlD,EAAkEC,IAAlE,EAAwEC,iBAAxE,EAA2F;AACzF,GAACF,eAAeG,WAAf,EAAD,GAAgCC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCV,UAAU,KAAV,EAAiB,4DAAjB,CAAxC,GAAyHA,UAAU,KAAV,CAAzJ,GAA4KW,SAA5K;;AAEA,MAAIC,MAAMP,KAAKQ,MAAf;AACA,MAAI,CAACD,GAAL,EAAU;AACR,WAAOT,YAAP;AACD;;AAED,MAAIW,WAAWX,aAAaY,WAAb,EAAf;AACA,MAAIC,MAAMZ,eAAea,WAAf,EAAV;AACA,MAAIC,SAASd,eAAee,cAAf,EAAb;AACA,MAAIC,QAAQN,SAASO,GAAT,CAAaL,GAAb,CAAZ;AACA,MAAIM,YAAYF,MAAMG,OAAN,EAAhB;;AAEA,MAAIC,WAAWJ,MAAMK,KAAN,CAAY;AACzBpB,UAAMiB,UAAUI,KAAV,CAAgB,CAAhB,EAAmBR,MAAnB,IAA6Bb,IAA7B,GAAoCiB,UAAUI,KAAV,CAAgBR,MAAhB,EAAwBE,MAAMO,SAAN,EAAxB,CADjB;AAEzBC,mBAAe7B,eAAeqB,MAAMS,gBAAN,EAAf,EAAyC5B,OAAOK,iBAAP,EAA0BM,GAA1B,EAA+BkB,MAA/B,EAAzC,EAAkFZ,MAAlF;AAFU,GAAZ,CAAf;;AAKA,MAAIa,YAAYb,SAASN,GAAzB;;AAEA,SAAOT,aAAasB,KAAb,CAAmB;AACxBX,cAAUA,SAASkB,GAAT,CAAahB,GAAb,EAAkBQ,QAAlB,CADc;AAExBS,oBAAgB7B,eAAeqB,KAAf,CAAqB;AACnCS,oBAAcH,SADqB;AAEnCI,mBAAaJ;AAFsB,KAArB;AAFQ,GAAnB,CAAP;AAOD;;AAEDK,OAAOC,OAAP,GAAiBnC,0BAAjB","file":"insertTextIntoContentState.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertTextIntoContentState\n * @typechecks\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar insertIntoList = require('./insertIntoList');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Repeat = Immutable.Repeat;\n\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : undefined;\n\n  var len = text.length;\n  if (!len) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var key = selectionState.getStartKey();\n  var offset = selectionState.getStartOffset();\n  var block = blockMap.get(key);\n  var blockText = block.getText();\n\n  var newBlock = block.merge({\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n  });\n\n  var newOffset = offset + len;\n\n  return contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: newOffset,\n      focusOffset: newOffset\n    })\n  });\n}\n\nmodule.exports = insertTextIntoContentState;"]}