{"version":3,"sources":["../../../src/components/draft/getContentStateFragment.js"],"names":["generateRandomKey","require","removeEntitiesAtEdges","getContentStateFragment","contentState","selectionState","startKey","getStartKey","startOffset","getStartOffset","endKey","getEndKey","endOffset","getEndOffset","contentWithoutEdgeEntities","blockMap","getBlockMap","blockKeys","keySeq","startIndex","indexOf","endIndex","slice","map","block","blockKey","newKey","text","getText","chars","getCharacterList","merge","key","characterList","set","toOrderedMap","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;AAaA;;AAEA,IAAIA,oBAAoBC,QAAQ,qBAAR,CAAxB;AACA,IAAIC,wBAAwBD,QAAQ,yBAAR,CAA5B;;AAEA,SAASE,uBAAT,CAAiCC,YAAjC,EAA+CC,cAA/C,EAA+D;AAC7D,MAAIC,WAAWD,eAAeE,WAAf,EAAf;AACA,MAAIC,cAAcH,eAAeI,cAAf,EAAlB;AACA,MAAIC,SAASL,eAAeM,SAAf,EAAb;AACA,MAAIC,YAAYP,eAAeQ,YAAf,EAAhB;;AAEA;AACA;AACA;AACA,MAAIC,6BAA6BZ,sBAAsBE,YAAtB,EAAoCC,cAApC,CAAjC;;AAEA,MAAIU,WAAWD,2BAA2BE,WAA3B,EAAf;AACA,MAAIC,YAAYF,SAASG,MAAT,EAAhB;AACA,MAAIC,aAAaF,UAAUG,OAAV,CAAkBd,QAAlB,CAAjB;AACA,MAAIe,WAAWJ,UAAUG,OAAV,CAAkBV,MAAlB,IAA4B,CAA3C;;AAEA,MAAIY,QAAQP,SAASO,KAAT,CAAeH,UAAf,EAA2BE,QAA3B,EAAqCE,GAArC,CAAyC,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC9E,QAAIC,SAAS1B,mBAAb;;AAEA,QAAI2B,OAAOH,MAAMI,OAAN,EAAX;AACA,QAAIC,QAAQL,MAAMM,gBAAN,EAAZ;;AAEA,QAAIxB,aAAaI,MAAjB,EAAyB;AACvB,aAAOc,MAAMO,KAAN,CAAY;AACjBC,aAAKN,MADY;AAEjBC,cAAMA,KAAKL,KAAL,CAAWd,WAAX,EAAwBI,SAAxB,CAFW;AAGjBqB,uBAAeJ,MAAMP,KAAN,CAAYd,WAAZ,EAAyBI,SAAzB;AAHE,OAAZ,CAAP;AAKD;;AAED,QAAIa,aAAanB,QAAjB,EAA2B;AACzB,aAAOkB,MAAMO,KAAN,CAAY;AACjBC,aAAKN,MADY;AAEjBC,cAAMA,KAAKL,KAAL,CAAWd,WAAX,CAFW;AAGjByB,uBAAeJ,MAAMP,KAAN,CAAYd,WAAZ;AAHE,OAAZ,CAAP;AAKD;;AAED,QAAIiB,aAAaf,MAAjB,EAAyB;AACvB,aAAOc,MAAMO,KAAN,CAAY;AACjBC,aAAKN,MADY;AAEjBC,cAAMA,KAAKL,KAAL,CAAW,CAAX,EAAcV,SAAd,CAFW;AAGjBqB,uBAAeJ,MAAMP,KAAN,CAAY,CAAZ,EAAeV,SAAf;AAHE,OAAZ,CAAP;AAKD;;AAED,WAAOY,MAAMU,GAAN,CAAU,KAAV,EAAiBR,MAAjB,CAAP;AACD,GA/BW,CAAZ;;AAiCA,SAAOJ,MAAMa,YAAN,EAAP;AACD;;AAEDC,OAAOC,OAAP,GAAiBlC,uBAAjB","file":"getContentStateFragment.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getContentStateFragment\n * @typechecks\n * \n */\n\n'use strict';\n\nvar generateRandomKey = require('./generateRandomKey');\nvar removeEntitiesAtEdges = require('./removeEntitiesAtEdges');\n\nfunction getContentStateFragment(contentState, selectionState) {\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n\n  // Edge entities should be stripped to ensure that we don't preserve\n  // invalid partial entities when the fragment is reused. We do, however,\n  // preserve entities that are entirely within the selection range.\n  var contentWithoutEdgeEntities = removeEntitiesAtEdges(contentState, selectionState);\n\n  var blockMap = contentWithoutEdgeEntities.getBlockMap();\n  var blockKeys = blockMap.keySeq();\n  var startIndex = blockKeys.indexOf(startKey);\n  var endIndex = blockKeys.indexOf(endKey) + 1;\n\n  var slice = blockMap.slice(startIndex, endIndex).map(function (block, blockKey) {\n    var newKey = generateRandomKey();\n\n    var text = block.getText();\n    var chars = block.getCharacterList();\n\n    if (startKey === endKey) {\n      return block.merge({\n        key: newKey,\n        text: text.slice(startOffset, endOffset),\n        characterList: chars.slice(startOffset, endOffset)\n      });\n    }\n\n    if (blockKey === startKey) {\n      return block.merge({\n        key: newKey,\n        text: text.slice(startOffset),\n        characterList: chars.slice(startOffset)\n      });\n    }\n\n    if (blockKey === endKey) {\n      return block.merge({\n        key: newKey,\n        text: text.slice(0, endOffset),\n        characterList: chars.slice(0, endOffset)\n      });\n    }\n\n    return block.set('key', newKey);\n  });\n\n  return slice.toOrderedMap();\n}\n\nmodule.exports = getContentStateFragment;"]}