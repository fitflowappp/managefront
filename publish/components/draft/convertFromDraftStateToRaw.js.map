{"version":3,"sources":["../../../src/components/draft/convertFromDraftStateToRaw.js"],"names":["DraftEntity","require","DraftStringKey","encodeEntityRanges","encodeInlineStyleRanges","convertFromDraftStateToRaw","contentState","entityStorageKey","entityStorageMap","rawBlocks","getBlockMap","forEach","block","blockKey","findEntityRanges","character","getEntity","start","stringifiedEntityKey","stringify","getEntityAt","hasOwnProperty","push","key","text","getText","type","getType","depth","canHaveDepth","getDepth","inlineStyleRanges","entityRanges","entityKeys","flippedStorageMap","jj","entity","get","unstringify","mutability","getMutability","data","getData","entityMap","blocks","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;;;;;;;AAEA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;AACA,IAAIC,iBAAiBD,QAAQ,kBAAR,CAArB;;AAEA,IAAIE,qBAAqBF,QAAQ,sBAAR,CAAzB;AACA,IAAIG,0BAA0BH,QAAQ,2BAAR,CAA9B;;AAEA,SAASI,0BAAT,CAAoCC,YAApC,EAAkD;AAChD,MAAIC,mBAAmB,CAAvB;AACA,MAAIC,mBAAmB,EAAvB;AACA,MAAIC,YAAY,EAAhB;;AAEAH,eAAaI,WAAb,GAA2BC,OAA3B,CAAmC,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC5DD,UAAME,gBAAN,CAAuB,UAAUC,SAAV,EAAqB;AAC1C,aAAOA,UAAUC,SAAV,OAA0B,IAAjC;AACD,KAFD,EAEG,UAAUC,KAAV,EAAiB;AAClB;AACA,UAAIC,uBAAuBhB,eAAeiB,SAAf,CAAyBP,MAAMQ,WAAN,CAAkBH,KAAlB,CAAzB,CAA3B;AACA,UAAI,CAACT,iBAAiBa,cAAjB,CAAgCH,oBAAhC,CAAL,EAA4D;AAC1DV,yBAAiBU,oBAAjB,IAAyC,KAAKX,kBAA9C;AACD;AACF,KARD;;AAUAE,cAAUa,IAAV,CAAe;AACbC,WAAKV,QADQ;AAEbW,YAAMZ,MAAMa,OAAN,EAFO;AAGbC,YAAMd,MAAMe,OAAN,EAHO;AAIbC,aAAOC,aAAajB,KAAb,IAAsBA,MAAMkB,QAAN,EAAtB,GAAyC,CAJnC;AAKbC,yBAAmB3B,wBAAwBQ,KAAxB,CALN;AAMboB,oBAAc7B,mBAAmBS,KAAnB,EAA0BJ,gBAA1B;AAND,KAAf;AAQD,GAnBD;;AAqBA;AACA;AACA,MAAIyB,aAAa,oBAAYzB,gBAAZ,CAAjB;AACA,MAAI0B,oBAAoB,EAAxB;AACAD,aAAWtB,OAAX,CAAmB,UAAUY,GAAV,EAAeY,EAAf,EAAmB;AACpC,QAAIC,SAASpC,YAAYqC,GAAZ,CAAgBnC,eAAeoC,WAAf,CAA2Bf,GAA3B,CAAhB,CAAb;AACAW,sBAAkBC,EAAlB,IAAwB;AACtBT,YAAMU,OAAOT,OAAP,EADgB;AAEtBY,kBAAYH,OAAOI,aAAP,EAFU;AAGtBC,YAAML,OAAOM,OAAP;AAHgB,KAAxB;AAKD,GAPD;;AASA,SAAO;AACLC,eAAWT,iBADN;AAELU,YAAQnC;AAFH,GAAP;AAID;;AAED,SAASoB,YAAT,CAAsBjB,KAAtB,EAA6B;AAC3B,MAAIc,OAAOd,MAAMe,OAAN,EAAX;AACA,SAAOD,SAAS,mBAAT,IAAgCA,SAAS,qBAAhD;AACD;;AAEDmB,OAAOC,OAAP,GAAiBzC,0BAAjB","file":"convertFromDraftStateToRaw.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromDraftStateToRaw\n * \n */\n\n'use strict';\n\nvar DraftEntity = require('./DraftEntity');\nvar DraftStringKey = require('./DraftStringKey');\n\nvar encodeEntityRanges = require('./encodeEntityRanges');\nvar encodeInlineStyleRanges = require('./encodeInlineStyleRanges');\n\nfunction convertFromDraftStateToRaw(contentState) {\n  var entityStorageKey = 0;\n  var entityStorageMap = {};\n  var rawBlocks = [];\n\n  contentState.getBlockMap().forEach(function (block, blockKey) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      // Stringify to maintain order of otherwise numeric keys.\n      var stringifiedEntityKey = DraftStringKey.stringify(block.getEntityAt(start));\n      if (!entityStorageMap.hasOwnProperty(stringifiedEntityKey)) {\n        entityStorageMap[stringifiedEntityKey] = '' + entityStorageKey++;\n      }\n    });\n\n    rawBlocks.push({\n      key: blockKey,\n      text: block.getText(),\n      type: block.getType(),\n      depth: canHaveDepth(block) ? block.getDepth() : 0,\n      inlineStyleRanges: encodeInlineStyleRanges(block),\n      entityRanges: encodeEntityRanges(block, entityStorageMap)\n    });\n  });\n\n  // Flip storage map so that our storage keys map to global\n  // DraftEntity keys.\n  var entityKeys = Object.keys(entityStorageMap);\n  var flippedStorageMap = {};\n  entityKeys.forEach(function (key, jj) {\n    var entity = DraftEntity.get(DraftStringKey.unstringify(key));\n    flippedStorageMap[jj] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n\n  return {\n    entityMap: flippedStorageMap,\n    blocks: rawBlocks\n  };\n}\n\nfunction canHaveDepth(block) {\n  var type = block.getType();\n  return type === 'ordered-list-item' || type === 'unordered-list-item';\n}\n\nmodule.exports = convertFromDraftStateToRaw;"]}